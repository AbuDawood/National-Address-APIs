id: SaAddressApi.Net
language: CSharp
name:
  Default: SaAddressApi.Net
qualifiedName:
  Default: SaAddressApi.Net
type: Assembly
modifiers: {}
items:
- id: SaAddressApi.Net
  commentId: N:SaAddressApi.Net
  language: CSharp
  name:
    CSharp: SaAddressApi.Net
    VB: SaAddressApi.Net
  nameWithType:
    CSharp: SaAddressApi.Net
    VB: SaAddressApi.Net
  qualifiedName:
    CSharp: SaAddressApi.Net
    VB: SaAddressApi.Net
  type: Namespace
  assemblies:
  - SaAddressApi.Net
  modifiers: {}
  items:
  - id: SaAddressApi.Net.SaAddressConfig
    commentId: T:SaAddressApi.Net.SaAddressConfig
    language: CSharp
    name:
      CSharp: SaAddressConfig
      VB: SaAddressConfig
    nameWithType:
      CSharp: SaAddressConfig
      VB: SaAddressConfig
    qualifiedName:
      CSharp: SaAddressApi.Net.SaAddressConfig
      VB: SaAddressApi.Net.SaAddressConfig
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net
    source:
      remote:
        path: SaAddressApi.Net/SaAddressConfig.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaAddressConfig
      path: ../SaAddressApi.Net/SaAddressConfig.cs
      startLine: 7
    summary: "\nMain config for the SaAddress API, use register at the startup\n"
    example: []
    syntax:
      content:
        CSharp: public static class SaAddressConfig
        VB: Public Module SaAddressConfig
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: SaAddressApi.Net.SaAddressConfig.Register(System.String,System.String,System.String)
      commentId: M:SaAddressApi.Net.SaAddressConfig.Register(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: Register(String, String, String)
        VB: Register(String, String, String)
      nameWithType:
        CSharp: SaAddressConfig.Register(String, String, String)
        VB: SaAddressConfig.Register(String, String, String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressConfig.Register(System.String, System.String, System.String)
        VB: SaAddressApi.Net.SaAddressConfig.Register(System.String, System.String, System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressConfig.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Register
        path: ../SaAddressApi.Net/SaAddressConfig.cs
        startLine: 18
      syntax:
        content:
          CSharp: public static void Register(string baseUrl, string key1, string key2)
          VB: Public Shared Sub Register(baseUrl As String, key1 As String, key2 As String)
        parameters:
        - id: baseUrl
          type: System.String
        - id: key1
          type: System.String
        - id: key2
          type: System.String
      overload: SaAddressApi.Net.SaAddressConfig.Register*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: SaAddressApi.Net.LayerName
    commentId: T:SaAddressApi.Net.LayerName
    language: CSharp
    name:
      CSharp: LayerName
      VB: LayerName
    nameWithType:
      CSharp: LayerName
      VB: LayerName
    qualifiedName:
      CSharp: SaAddressApi.Net.LayerName
      VB: SaAddressApi.Net.LayerName
    type: Enum
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net
    source:
      remote:
        path: SaAddressApi.Net/SaAddressRequests.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: LayerName
      path: ../SaAddressApi.Net/SaAddressRequests.cs
      startLine: 11
    summary: "\nType of area\n"
    example: []
    syntax:
      content:
        CSharp: public enum LayerName
        VB: Public Enum LayerName
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: SaAddressApi.Net.LayerName.regions
      commentId: F:SaAddressApi.Net.LayerName.regions
      language: CSharp
      name:
        CSharp: regions
        VB: regions
      nameWithType:
        CSharp: LayerName.regions
        VB: LayerName.regions
      qualifiedName:
        CSharp: SaAddressApi.Net.LayerName.regions
        VB: SaAddressApi.Net.LayerName.regions
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressRequests.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: regions
        path: ../SaAddressApi.Net/SaAddressRequests.cs
        startLine: 13
      syntax:
        content:
          CSharp: regions = 0
          VB: regions = 0
        return:
          type: SaAddressApi.Net.LayerName
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.LayerName.cities
      commentId: F:SaAddressApi.Net.LayerName.cities
      language: CSharp
      name:
        CSharp: cities
        VB: cities
      nameWithType:
        CSharp: LayerName.cities
        VB: LayerName.cities
      qualifiedName:
        CSharp: SaAddressApi.Net.LayerName.cities
        VB: SaAddressApi.Net.LayerName.cities
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressRequests.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: cities
        path: ../SaAddressApi.Net/SaAddressRequests.cs
        startLine: 14
      syntax:
        content:
          CSharp: cities = 1
          VB: cities = 1
        return:
          type: SaAddressApi.Net.LayerName
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.LayerName.districts
      commentId: F:SaAddressApi.Net.LayerName.districts
      language: CSharp
      name:
        CSharp: districts
        VB: districts
      nameWithType:
        CSharp: LayerName.districts
        VB: LayerName.districts
      qualifiedName:
        CSharp: SaAddressApi.Net.LayerName.districts
        VB: SaAddressApi.Net.LayerName.districts
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressRequests.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: districts
        path: ../SaAddressApi.Net/SaAddressRequests.cs
        startLine: 15
      syntax:
        content:
          CSharp: districts = 2
          VB: districts = 2
        return:
          type: SaAddressApi.Net.LayerName
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.LayerName.streets
      commentId: F:SaAddressApi.Net.LayerName.streets
      language: CSharp
      name:
        CSharp: streets
        VB: streets
      nameWithType:
        CSharp: LayerName.streets
        VB: LayerName.streets
      qualifiedName:
        CSharp: SaAddressApi.Net.LayerName.streets
        VB: SaAddressApi.Net.LayerName.streets
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressRequests.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: streets
        path: ../SaAddressApi.Net/SaAddressRequests.cs
        startLine: 16
      syntax:
        content:
          CSharp: streets = 3
          VB: streets = 3
        return:
          type: SaAddressApi.Net.LayerName
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.LayerName.zipcodes
      commentId: F:SaAddressApi.Net.LayerName.zipcodes
      language: CSharp
      name:
        CSharp: zipcodes
        VB: zipcodes
      nameWithType:
        CSharp: LayerName.zipcodes
        VB: LayerName.zipcodes
      qualifiedName:
        CSharp: SaAddressApi.Net.LayerName.zipcodes
        VB: SaAddressApi.Net.LayerName.zipcodes
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressRequests.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: zipcodes
        path: ../SaAddressApi.Net/SaAddressRequests.cs
        startLine: 17
      syntax:
        content:
          CSharp: zipcodes = 4
          VB: zipcodes = 4
        return:
          type: SaAddressApi.Net.LayerName
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: SaAddressApi.Net.SaAddressServices
    commentId: T:SaAddressApi.Net.SaAddressServices
    language: CSharp
    name:
      CSharp: SaAddressServices
      VB: SaAddressServices
    nameWithType:
      CSharp: SaAddressServices
      VB: SaAddressServices
    qualifiedName:
      CSharp: SaAddressApi.Net.SaAddressServices
      VB: SaAddressApi.Net.SaAddressServices
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net
    source:
      remote:
        path: SaAddressApi.Net/SaAddressServices.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaAddressServices
      path: ../SaAddressApi.Net/SaAddressServices.cs
      startLine: 7
    syntax:
      content:
        CSharp: public class SaAddressServices
        VB: Public Class SaAddressServices
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.SaAddressServices.#ctor(System.Boolean,System.String,System.String,System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.#ctor(System.Boolean,System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: SaAddressServices(Boolean, String, String, String)
        VB: SaAddressServices(Boolean, String, String, String)
      nameWithType:
        CSharp: SaAddressServices.SaAddressServices(Boolean, String, String, String)
        VB: SaAddressServices.SaAddressServices(Boolean, String, String, String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.SaAddressServices(System.Boolean, System.String, System.String, System.String)
        VB: SaAddressApi.Net.SaAddressServices.SaAddressServices(System.Boolean, System.String, System.String, System.String)
      type: Constructor
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: .ctor
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 11
      syntax:
        content:
          CSharp: public SaAddressServices(bool use2ndKey = false, string language = "A", string format = "json", string encode = null)
          VB: Public Sub New(use2ndKey As Boolean = False, language As String = "A", format As String = "json", encode As String = Nothing)
        parameters:
        - id: use2ndKey
          type: System.Boolean
        - id: language
          type: System.String
        - id: format
          type: System.String
        - id: encode
          type: System.String
      overload: SaAddressApi.Net.SaAddressServices.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync(System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AddressV4FreeTextAsync(String, Int32)
        VB: AddressV4FreeTextAsync(String, Int32)
      nameWithType:
        CSharp: SaAddressServices.AddressV4FreeTextAsync(String, Int32)
        VB: SaAddressServices.AddressV4FreeTextAsync(String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync(System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync(System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AddressV4FreeTextAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 20
      example: []
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV4>> AddressV4FreeTextAsync(string addressstring, int page = 1)
          VB: Public Function AddressV4FreeTextAsync(addressstring As String, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV4))
        parameters:
        - id: addressstring
          type: System.String
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV4}}
      overload: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync(System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AddressV3FreeTextAsync(String, Int32)
        VB: AddressV3FreeTextAsync(String, Int32)
      nameWithType:
        CSharp: SaAddressServices.AddressV3FreeTextAsync(String, Int32)
        VB: SaAddressServices.AddressV3FreeTextAsync(String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync(System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync(System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AddressV3FreeTextAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 28
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> AddressV3FreeTextAsync(string addressstring, int page = 1)
          VB: Public Function AddressV3FreeTextAsync(addressstring As String, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: addressstring
          type: System.String
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync(System.Double,System.Double,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync(System.Double,System.Double,System.Int32)
      language: CSharp
      name:
        CSharp: AddressByGeocodeAsync(Double, Double, Int32)
        VB: AddressByGeocodeAsync(Double, Double, Int32)
      nameWithType:
        CSharp: SaAddressServices.AddressByGeocodeAsync(Double, Double, Int32)
        VB: SaAddressServices.AddressByGeocodeAsync(Double, Double, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync(System.Double, System.Double, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync(System.Double, System.Double, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AddressByGeocodeAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 36
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> AddressByGeocodeAsync(double lat, double lng, int page = 1)
          VB: Public Function AddressByGeocodeAsync(lat As Double, lng As Double, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: lat
          type: System.Double
        - id: lng
          type: System.Double
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: AddressFixedParamsAsync(String, String, String, String, String, String, String, String, Int32)
        VB: AddressFixedParamsAsync(String, String, String, String, String, String, String, String, Int32)
      nameWithType:
        CSharp: SaAddressServices.AddressFixedParamsAsync(String, String, String, String, String, String, String, String, Int32)
        VB: SaAddressServices.AddressFixedParamsAsync(String, String, String, String, String, String, String, String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AddressFixedParamsAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 44
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> AddressFixedParamsAsync(string cityId = null, string districtId = null, string buildingNumber = null, string zipcode = null, string additionalNumber = null, string cityName = null, string districtName = null, string streetName = null, int page = 1)
          VB: Public Function AddressFixedParamsAsync(cityId As String = Nothing, districtId As String = Nothing, buildingNumber As String = Nothing, zipcode As String = Nothing, additionalNumber As String = Nothing, cityName As String = Nothing, districtName As String = Nothing, streetName As String = Nothing, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: cityId
          type: System.String
        - id: districtId
          type: System.String
        - id: buildingNumber
          type: System.String
        - id: zipcode
          type: System.String
        - id: additionalNumber
          type: System.String
        - id: cityName
          type: System.String
        - id: districtName
          type: System.String
        - id: streetName
          type: System.String
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync(System.String,System.String,System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.VerifyAddressAsync(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: VerifyAddressAsync(String, String, String)
        VB: VerifyAddressAsync(String, String, String)
      nameWithType:
        CSharp: SaAddressServices.VerifyAddressAsync(String, String, String)
        VB: SaAddressServices.VerifyAddressAsync(String, String, String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync(System.String, System.String, System.String)
        VB: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync(System.String, System.String, System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: VerifyAddressAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 55
      syntax:
        content:
          CSharp: public Task<VerifyAddressResponse> VerifyAddressAsync(string buildingNumber = null, string zipCode = null, string additionalNumber = null)
          VB: Public Function VerifyAddressAsync(buildingNumber As String = Nothing, zipCode As String = Nothing, additionalNumber As String = Nothing) As Task(Of VerifyAddressResponse)
        parameters:
        - id: buildingNumber
          type: System.String
        - id: zipCode
          type: System.String
        - id: additionalNumber
          type: System.String
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.VerifyAddressResponse}
      overload: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync(System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: PoiFreeTextAsync(String, Int32)
        VB: PoiFreeTextAsync(String, Int32)
      nameWithType:
        CSharp: SaAddressServices.PoiFreeTextAsync(String, Int32)
        VB: SaAddressServices.PoiFreeTextAsync(String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync(System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync(System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PoiFreeTextAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 64
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> PoiFreeTextAsync(string serviceString, int page = 1)
          VB: Public Function PoiFreeTextAsync(serviceString As String, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: serviceString
          type: System.String
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)
      language: CSharp
      name:
        CSharp: PoiFixedParamsAsync(String, String, String, String, String, String, String, String, String, String, String, String, Int32)
        VB: PoiFixedParamsAsync(String, String, String, String, String, String, String, String, String, String, String, String, Int32)
      nameWithType:
        CSharp: SaAddressServices.PoiFixedParamsAsync(String, String, String, String, String, String, String, String, String, String, String, String, Int32)
        VB: SaAddressServices.PoiFixedParamsAsync(String, String, String, String, String, String, String, String, String, String, String, String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PoiFixedParamsAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 72
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> PoiFixedParamsAsync(string serviceString = null, string cityId = null, string districtId = null, string buildingNumber = null, string zipCode = null, string additionalNumber = null, string cityName = null, string districtName = null, string streetName = null, string servicecategoryId = null, string servicesubcategoryId = null, string regionId = null, int page = 1)
          VB: Public Function PoiFixedParamsAsync(serviceString As String = Nothing, cityId As String = Nothing, districtId As String = Nothing, buildingNumber As String = Nothing, zipCode As String = Nothing, additionalNumber As String = Nothing, cityName As String = Nothing, districtName As String = Nothing, streetName As String = Nothing, servicecategoryId As String = Nothing, servicesubcategoryId As String = Nothing, regionId As String = Nothing, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: serviceString
          type: System.String
        - id: cityId
          type: System.String
        - id: districtId
          type: System.String
        - id: buildingNumber
          type: System.String
        - id: zipCode
          type: System.String
        - id: additionalNumber
          type: System.String
        - id: cityName
          type: System.String
        - id: districtName
          type: System.String
        - id: streetName
          type: System.String
        - id: servicecategoryId
          type: System.String
        - id: servicesubcategoryId
          type: System.String
        - id: regionId
          type: System.String
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync
      commentId: M:SaAddressApi.Net.SaAddressServices.LookupRegionsAsync
      language: CSharp
      name:
        CSharp: LookupRegionsAsync()
        VB: LookupRegionsAsync()
      nameWithType:
        CSharp: SaAddressServices.LookupRegionsAsync()
        VB: SaAddressServices.LookupRegionsAsync()
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync()
        VB: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync()
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: LookupRegionsAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 86
      syntax:
        content:
          CSharp: public Task<LookupResponse> LookupRegionsAsync()
          VB: Public Function LookupRegionsAsync As Task(Of LookupResponse)
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
      overload: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync(System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.LookupCitiesAsync(System.String)
      language: CSharp
      name:
        CSharp: LookupCitiesAsync(String)
        VB: LookupCitiesAsync(String)
      nameWithType:
        CSharp: SaAddressServices.LookupCitiesAsync(String)
        VB: SaAddressServices.LookupCitiesAsync(String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync(System.String)
        VB: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync(System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: LookupCitiesAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 94
      syntax:
        content:
          CSharp: public Task<LookupResponse> LookupCitiesAsync(string regionId = "-1")
          VB: Public Function LookupCitiesAsync(regionId As String = "-1") As Task(Of LookupResponse)
        parameters:
        - id: regionId
          type: System.String
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
      overload: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync(System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync(System.String)
      language: CSharp
      name:
        CSharp: LookupDistrictsAsync(String)
        VB: LookupDistrictsAsync(String)
      nameWithType:
        CSharp: SaAddressServices.LookupDistrictsAsync(String)
        VB: SaAddressServices.LookupDistrictsAsync(String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync(System.String)
        VB: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync(System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: LookupDistrictsAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 103
      syntax:
        content:
          CSharp: public Task<LookupResponse> LookupDistrictsAsync(string cityId)
          VB: Public Function LookupDistrictsAsync(cityId As String) As Task(Of LookupResponse)
        parameters:
        - id: cityId
          type: System.String
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
      overload: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync
      commentId: M:SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync
      language: CSharp
      name:
        CSharp: LookupServiceCategoryAsync()
        VB: LookupServiceCategoryAsync()
      nameWithType:
        CSharp: SaAddressServices.LookupServiceCategoryAsync()
        VB: SaAddressServices.LookupServiceCategoryAsync()
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync()
        VB: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync()
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: LookupServiceCategoryAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 112
      syntax:
        content:
          CSharp: public Task<LookupResponse> LookupServiceCategoryAsync()
          VB: Public Function LookupServiceCategoryAsync As Task(Of LookupResponse)
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
      overload: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync(System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync(System.String)
      language: CSharp
      name:
        CSharp: LookupSubserviceCategoryAsync(String)
        VB: LookupSubserviceCategoryAsync(String)
      nameWithType:
        CSharp: SaAddressServices.LookupSubserviceCategoryAsync(String)
        VB: SaAddressServices.LookupSubserviceCategoryAsync(String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync(System.String)
        VB: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync(System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: LookupSubserviceCategoryAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 120
      syntax:
        content:
          CSharp: public Task<LookupResponse> LookupSubserviceCategoryAsync(string serviceCategoryId)
          VB: Public Function LookupSubserviceCategoryAsync(serviceCategoryId As String) As Task(Of LookupResponse)
        parameters:
        - id: serviceCategoryId
          type: System.String
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
      overload: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.BulkSearchAsync(System.String,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.BulkSearchAsync(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: BulkSearchAsync(String, Int32)
        VB: BulkSearchAsync(String, Int32)
      nameWithType:
        CSharp: SaAddressServices.BulkSearchAsync(String, Int32)
        VB: SaAddressServices.BulkSearchAsync(String, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.BulkSearchAsync(System.String, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.BulkSearchAsync(System.String, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: BulkSearchAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 143
      summary: "\nSearch bulk address API allows user to find complete details of multiple address by providing building number,\nzip code for the addresses. You can decide to use Json or XML as an output format in addition to language of your choice \nfrom Arabic or English.\n"
      example: []
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> BulkSearchAsync(string addressstring, int page = 1)
          VB: Public Function BulkSearchAsync(addressstring As String, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: addressstring
          type: System.String
          description: "\nAddress attributes would be separated with a pipe. Whereas, \neach address would be separated from others with a semicolon.\nBuildingNumber|ZipCode|AdditionalNumber; \nFor example, 8228|12643|2121;3908|12991|8966;….. upto 10. \nNOTE: Even if the string contains more than 10 addresses, the 1st 10 addresses will be considered where the rest would be discarded.\n"
        - id: page
          type: System.Int32
          description: "\nBy default each request returns a maximum number of 10 results. If there are a large number of results, in such a case, this page number must be passed along to get the next set of results. Default value is 1.\n"
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.BulkSearchAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.NearestPoiAsync(System.String,System.Double,System.Double,System.Double,System.Int32)
      commentId: M:SaAddressApi.Net.SaAddressServices.NearestPoiAsync(System.String,System.Double,System.Double,System.Double,System.Int32)
      language: CSharp
      name:
        CSharp: NearestPoiAsync(String, Double, Double, Double, Int32)
        VB: NearestPoiAsync(String, Double, Double, Double, Int32)
      nameWithType:
        CSharp: SaAddressServices.NearestPoiAsync(String, Double, Double, Double, Int32)
        VB: SaAddressServices.NearestPoiAsync(String, Double, Double, Double, Int32)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.NearestPoiAsync(System.String, System.Double, System.Double, System.Double, System.Int32)
        VB: SaAddressApi.Net.SaAddressServices.NearestPoiAsync(System.String, System.Double, System.Double, System.Double, System.Int32)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: NearestPoiAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 151
      syntax:
        content:
          CSharp: public Task<AddressResponse<SaAddressV3>> NearestPoiAsync(string serviceCategoryId, double lat, double lng, double radius = 0.5, int page = 1)
          VB: Public Function NearestPoiAsync(serviceCategoryId As String, lat As Double, lng As Double, radius As Double = 0.5, page As Integer = 1) As Task(Of AddressResponse(Of SaAddressV3))
        parameters:
        - id: serviceCategoryId
          type: System.String
        - id: lat
          type: System.Double
        - id: lng
          type: System.Double
        - id: radius
          type: System.Double
        - id: page
          type: System.Int32
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
      overload: SaAddressApi.Net.SaAddressServices.NearestPoiAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync(SaAddressApi.Net.LayerName,System.String)
      commentId: M:SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync(SaAddressApi.Net.LayerName,System.String)
      language: CSharp
      name:
        CSharp: ExtentsFeaturesAsync(LayerName, String)
        VB: ExtentsFeaturesAsync(LayerName, String)
      nameWithType:
        CSharp: SaAddressServices.ExtentsFeaturesAsync(LayerName, String)
        VB: SaAddressServices.ExtentsFeaturesAsync(LayerName, String)
      qualifiedName:
        CSharp: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync(SaAddressApi.Net.LayerName, System.String)
        VB: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync(SaAddressApi.Net.LayerName, System.String)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net
      source:
        remote:
          path: SaAddressApi.Net/SaAddressServices.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ExtentsFeaturesAsync
        path: ../SaAddressApi.Net/SaAddressServices.cs
        startLine: 161
      syntax:
        content:
          CSharp: public Task<ExtentsFeaturesResponse> ExtentsFeaturesAsync(LayerName layerName, string featureId)
          VB: Public Function ExtentsFeaturesAsync(layerName As LayerName, featureId As String) As Task(Of ExtentsFeaturesResponse)
        parameters:
        - id: layerName
          type: SaAddressApi.Net.LayerName
        - id: featureId
          type: System.String
        return:
          type: System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse}
      overload: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: SaAddressApi.Net.Model
  commentId: N:SaAddressApi.Net.Model
  language: CSharp
  name:
    CSharp: SaAddressApi.Net.Model
    VB: SaAddressApi.Net.Model
  nameWithType:
    CSharp: SaAddressApi.Net.Model
    VB: SaAddressApi.Net.Model
  qualifiedName:
    CSharp: SaAddressApi.Net.Model
    VB: SaAddressApi.Net.Model
  type: Namespace
  assemblies:
  - SaAddressApi.Net
  modifiers: {}
  items:
  - id: SaAddressApi.Net.Model.Helper
    commentId: T:SaAddressApi.Net.Model.Helper
    language: CSharp
    name:
      CSharp: Helper
      VB: Helper
    nameWithType:
      CSharp: Helper
      VB: Helper
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Helper
      VB: SaAddressApi.Net.Model.Helper
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model
    source:
      remote:
        path: SaAddressApi.Net/Model/Helper.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: Helper
      path: ../SaAddressApi.Net/Model/Helper.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class Helper
        VB: Public Class Helper
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress(SaAddressApi.Net.Model.Interfaces.ISaAddress)
      commentId: M:SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress(SaAddressApi.Net.Model.Interfaces.ISaAddress)
      language: CSharp
      name:
        CSharp: ConvertToArbicFormattedAddress(ISaAddress)
        VB: ConvertToArbicFormattedAddress(ISaAddress)
      nameWithType:
        CSharp: Helper.ConvertToArbicFormattedAddress(ISaAddress)
        VB: Helper.ConvertToArbicFormattedAddress(ISaAddress)
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress(SaAddressApi.Net.Model.Interfaces.ISaAddress)
        VB: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress(SaAddressApi.Net.Model.Interfaces.ISaAddress)
      type: Method
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/Helper.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ConvertToArbicFormattedAddress
        path: ../SaAddressApi.Net/Model/Helper.cs
        startLine: 21
      summary: "\nreturn the formatted address from <xref href=\"SaAddressApi.Net.Model.Interfaces.ISaAddress\" data-throw-if-not-resolved=\"false\"></xref> components details\n"
      example: []
      syntax:
        content:
          CSharp: public static string ConvertToArbicFormattedAddress(ISaAddress saAddress)
          VB: Public Shared Function ConvertToArbicFormattedAddress(saAddress As ISaAddress) As String
        parameters:
        - id: saAddress
          type: SaAddressApi.Net.Model.Interfaces.ISaAddress
          description: "\n<xref href=\"SaAddressApi.Net.Model.SaAddressV3\" data-throw-if-not-resolved=\"false\"></xref> Or <xref href=\"SaAddressApi.Net.Model.SaAddressV4\" data-throw-if-not-resolved=\"false\"></xref>\n"
        return:
          type: System.String
          description: "\nFormatted Address as a string [buildingNumber] [street]-{District}، {City} {PostCode}-{AdditionalCode} {RegionName}\n"
      overload: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: must be no null val
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        SaAddressApi.Net.Model.Interfaces.ISaAddress: 
        SaAddressApi.Net.Model.SaAddressV3: 
        SaAddressApi.Net.Model.SaAddressV4: 
        System.ArgumentNullException: 
  - id: SaAddressApi.Net.Model.SaAddressV3
    commentId: T:SaAddressApi.Net.Model.SaAddressV3
    language: CSharp
    name:
      CSharp: SaAddressV3
      VB: SaAddressV3
    nameWithType:
      CSharp: SaAddressV3
      VB: SaAddressV3
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.SaAddressV3
      VB: SaAddressApi.Net.Model.SaAddressV3
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model
    source:
      remote:
        path: SaAddressApi.Net/Model/SaAddressV3.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaAddressV3
      path: ../SaAddressApi.Net/Model/SaAddressV3.cs
      startLine: 10
    syntax:
      content:
        CSharp: 'public class SaAddressV3 : SaAddressV4, ISaAddress'
        VB: >-
          Public Class SaAddressV3

              Inherits SaAddressV4

              Implements ISaAddress
    inheritance:
    - System.Object
    - SaAddressApi.Net.Model.SaAddressV4
    implements:
    - SaAddressApi.Net.Model.Interfaces.ISaAddress
    inheritedMembers:
    - SaAddressApi.Net.Model.SaAddressV4.Title
    - SaAddressApi.Net.Model.SaAddressV4.Address1
    - SaAddressApi.Net.Model.SaAddressV4.Address2
    - SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
    - SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
    - SaAddressApi.Net.Model.SaAddressV4.Street
    - SaAddressApi.Net.Model.SaAddressV4.District
    - SaAddressApi.Net.Model.SaAddressV4.City
    - SaAddressApi.Net.Model.SaAddressV4.PostCode
    - SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
    - SaAddressApi.Net.Model.SaAddressV4.RegionName
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.SaAddressV3.PolygonString
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.PolygonString
      language: CSharp
      name:
        CSharp: PolygonString
        VB: PolygonString
      nameWithType:
        CSharp: SaAddressV3.PolygonString
        VB: SaAddressV3.PolygonString
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.PolygonString
        VB: SaAddressApi.Net.Model.SaAddressV3.PolygonString
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PolygonString
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 12
      syntax:
        content:
          CSharp: >-
            [JsonProperty("PolygonString")]

            public string PolygonString { get; set; }
          VB: >-
            <JsonProperty("PolygonString")>

            Public Property PolygonString As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.PolygonString*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: PolygonString
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
      language: CSharp
      name:
        CSharp: IsPrimaryAddress
        VB: IsPrimaryAddress
      nameWithType:
        CSharp: SaAddressV3.IsPrimaryAddress
        VB: SaAddressV3.IsPrimaryAddress
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
        VB: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: IsPrimaryAddress
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 15
      syntax:
        content:
          CSharp: >-
            [JsonProperty("IsPrimaryAddress")]

            public string IsPrimaryAddress { get; set; }
          VB: >-
            <JsonProperty("IsPrimaryAddress")>

            Public Property IsPrimaryAddress As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: IsPrimaryAddress
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.UnitNumber
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.UnitNumber
      language: CSharp
      name:
        CSharp: UnitNumber
        VB: UnitNumber
      nameWithType:
        CSharp: SaAddressV3.UnitNumber
        VB: SaAddressV3.UnitNumber
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.UnitNumber
        VB: SaAddressApi.Net.Model.SaAddressV3.UnitNumber
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: UnitNumber
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 18
      syntax:
        content:
          CSharp: >-
            [JsonProperty("UnitNumber")]

            public string UnitNumber { get; set; }
          VB: >-
            <JsonProperty("UnitNumber")>

            Public Property UnitNumber As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.UnitNumber*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: UnitNumber
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.Latitude
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.Latitude
      language: CSharp
      name:
        CSharp: Latitude
        VB: Latitude
      nameWithType:
        CSharp: SaAddressV3.Latitude
        VB: SaAddressV3.Latitude
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.Latitude
        VB: SaAddressApi.Net.Model.SaAddressV3.Latitude
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Latitude
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 21
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Latitude")]

            public double? Latitude { get; set; }
          VB: >-
            <JsonProperty("Latitude")>

            Public Property Latitude As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.SaAddressV3.Latitude*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Latitude
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.Longitude
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.Longitude
      language: CSharp
      name:
        CSharp: Longitude
        VB: Longitude
      nameWithType:
        CSharp: SaAddressV3.Longitude
        VB: SaAddressV3.Longitude
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.Longitude
        VB: SaAddressApi.Net.Model.SaAddressV3.Longitude
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Longitude
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 24
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Longitude")]

            public double? Longitude { get; set; }
          VB: >-
            <JsonProperty("Longitude")>

            Public Property Longitude As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.SaAddressV3.Longitude*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Longitude
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.CityId
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.CityId
      language: CSharp
      name:
        CSharp: CityId
        VB: CityId
      nameWithType:
        CSharp: SaAddressV3.CityId
        VB: SaAddressV3.CityId
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.CityId
        VB: SaAddressApi.Net.Model.SaAddressV3.CityId
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: CityId
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 27
      syntax:
        content:
          CSharp: >-
            [JsonProperty("CityId")]

            public string CityId { get; set; }
          VB: >-
            <JsonProperty("CityId")>

            Public Property CityId As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.CityId*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: CityId
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.RegionId
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.RegionId
      language: CSharp
      name:
        CSharp: RegionId
        VB: RegionId
      nameWithType:
        CSharp: SaAddressV3.RegionId
        VB: SaAddressV3.RegionId
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.RegionId
        VB: SaAddressApi.Net.Model.SaAddressV3.RegionId
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: RegionId
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 30
      syntax:
        content:
          CSharp: >-
            [JsonProperty("RegionId")]

            public string RegionId { get; set; }
          VB: >-
            <JsonProperty("RegionId")>

            Public Property RegionId As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.RegionId*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: RegionId
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.Restriction
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.Restriction
      language: CSharp
      name:
        CSharp: Restriction
        VB: Restriction
      nameWithType:
        CSharp: SaAddressV3.Restriction
        VB: SaAddressV3.Restriction
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.Restriction
        VB: SaAddressApi.Net.Model.SaAddressV3.Restriction
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Restriction
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 33
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Restriction")]

            public string Restriction { get; set; }
          VB: >-
            <JsonProperty("Restriction")>

            Public Property Restriction As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.Restriction*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Restriction
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.PKAddressId
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.PKAddressId
      language: CSharp
      name:
        CSharp: PKAddressId
        VB: PKAddressId
      nameWithType:
        CSharp: SaAddressV3.PKAddressId
        VB: SaAddressV3.PKAddressId
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.PKAddressId
        VB: SaAddressApi.Net.Model.SaAddressV3.PKAddressId
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PKAddressId
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 36
      syntax:
        content:
          CSharp: >-
            [JsonProperty("PKAddressID")]

            public string PKAddressId { get; set; }
          VB: >-
            <JsonProperty("PKAddressID")>

            Public Property PKAddressId As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.PKAddressId*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: PKAddressID
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.DistrictId
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.DistrictId
      language: CSharp
      name:
        CSharp: DistrictId
        VB: DistrictId
      nameWithType:
        CSharp: SaAddressV3.DistrictId
        VB: SaAddressV3.DistrictId
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.DistrictId
        VB: SaAddressApi.Net.Model.SaAddressV3.DistrictId
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: DistrictId
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 39
      syntax:
        content:
          CSharp: >-
            [JsonProperty("DistrictID")]

            public string DistrictId { get; set; }
          VB: >-
            <JsonProperty("DistrictID")>

            Public Property DistrictId As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.DistrictId*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: DistrictID
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.TitleL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.TitleL2
      language: CSharp
      name:
        CSharp: TitleL2
        VB: TitleL2
      nameWithType:
        CSharp: SaAddressV3.TitleL2
        VB: SaAddressV3.TitleL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.TitleL2
        VB: SaAddressApi.Net.Model.SaAddressV3.TitleL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: TitleL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 42
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Title_L2")]

            public string TitleL2 { get; set; }
          VB: >-
            <JsonProperty("Title_L2")>

            Public Property TitleL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.TitleL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Title_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
      language: CSharp
      name:
        CSharp: RegionNameL2
        VB: RegionNameL2
      nameWithType:
        CSharp: SaAddressV3.RegionNameL2
        VB: SaAddressV3.RegionNameL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
        VB: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: RegionNameL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 45
      syntax:
        content:
          CSharp: >-
            [JsonProperty("RegionName_L2")]

            public string RegionNameL2 { get; set; }
          VB: >-
            <JsonProperty("RegionName_L2")>

            Public Property RegionNameL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: RegionName_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.CityL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.CityL2
      language: CSharp
      name:
        CSharp: CityL2
        VB: CityL2
      nameWithType:
        CSharp: SaAddressV3.CityL2
        VB: SaAddressV3.CityL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.CityL2
        VB: SaAddressApi.Net.Model.SaAddressV3.CityL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: CityL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 48
      syntax:
        content:
          CSharp: >-
            [JsonProperty("City_L2")]

            public string CityL2 { get; set; }
          VB: >-
            <JsonProperty("City_L2")>

            Public Property CityL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.CityL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: City_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.StreetL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.StreetL2
      language: CSharp
      name:
        CSharp: StreetL2
        VB: StreetL2
      nameWithType:
        CSharp: SaAddressV3.StreetL2
        VB: SaAddressV3.StreetL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.StreetL2
        VB: SaAddressApi.Net.Model.SaAddressV3.StreetL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: StreetL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 51
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Street_L2")]

            public string StreetL2 { get; set; }
          VB: >-
            <JsonProperty("Street_L2")>

            Public Property StreetL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.StreetL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Street_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.DistrictL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.DistrictL2
      language: CSharp
      name:
        CSharp: DistrictL2
        VB: DistrictL2
      nameWithType:
        CSharp: SaAddressV3.DistrictL2
        VB: SaAddressV3.DistrictL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.DistrictL2
        VB: SaAddressApi.Net.Model.SaAddressV3.DistrictL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: DistrictL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 54
      syntax:
        content:
          CSharp: >-
            [JsonProperty("District_L2")]

            public string DistrictL2 { get; set; }
          VB: >-
            <JsonProperty("District_L2")>

            Public Property DistrictL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.DistrictL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: District_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
      language: CSharp
      name:
        CSharp: CompanyNameL2
        VB: CompanyNameL2
      nameWithType:
        CSharp: SaAddressV3.CompanyNameL2
        VB: SaAddressV3.CompanyNameL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
        VB: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: CompanyNameL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 57
      syntax:
        content:
          CSharp: >-
            [JsonProperty("CompanyName_L2")]

            public string CompanyNameL2 { get; set; }
          VB: >-
            <JsonProperty("CompanyName_L2")>

            Public Property CompanyNameL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: CompanyName_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateId
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.GovernorateId
      language: CSharp
      name:
        CSharp: GovernorateId
        VB: GovernorateId
      nameWithType:
        CSharp: SaAddressV3.GovernorateId
        VB: SaAddressV3.GovernorateId
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.GovernorateId
        VB: SaAddressApi.Net.Model.SaAddressV3.GovernorateId
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: GovernorateId
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 60
      syntax:
        content:
          CSharp: >-
            [JsonProperty("GovernorateID")]

            public string GovernorateId { get; set; }
          VB: >-
            <JsonProperty("GovernorateID")>

            Public Property GovernorateId As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.GovernorateId*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: GovernorateID
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.Governorate
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.Governorate
      language: CSharp
      name:
        CSharp: Governorate
        VB: Governorate
      nameWithType:
        CSharp: SaAddressV3.Governorate
        VB: SaAddressV3.Governorate
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.Governorate
        VB: SaAddressApi.Net.Model.SaAddressV3.Governorate
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Governorate
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 63
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Governorate")]

            public string Governorate { get; set; }
          VB: >-
            <JsonProperty("Governorate")>

            Public Property Governorate As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.Governorate*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Governorate
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
      commentId: P:SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
      language: CSharp
      name:
        CSharp: GovernorateL2
        VB: GovernorateL2
      nameWithType:
        CSharp: SaAddressV3.GovernorateL2
        VB: SaAddressV3.GovernorateL2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
        VB: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV3.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: GovernorateL2
        path: ../SaAddressApi.Net/Model/SaAddressV3.cs
        startLine: 66
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Governorate_L2")]

            public string GovernorateL2 { get; set; }
          VB: >-
            <JsonProperty("Governorate_L2")>

            Public Property GovernorateL2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Governorate_L2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.SaAddressV4
    commentId: T:SaAddressApi.Net.Model.SaAddressV4
    language: CSharp
    name:
      CSharp: SaAddressV4
      VB: SaAddressV4
    nameWithType:
      CSharp: SaAddressV4
      VB: SaAddressV4
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.SaAddressV4
      VB: SaAddressApi.Net.Model.SaAddressV4
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model
    source:
      remote:
        path: SaAddressApi.Net/Model/SaAddressV4.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaAddressV4
      path: ../SaAddressApi.Net/Model/SaAddressV4.cs
      startLine: 10
    syntax:
      content:
        CSharp: 'public class SaAddressV4 : ISaAddress'
        VB: >-
          Public Class SaAddressV4

              Implements ISaAddress
    inheritance:
    - System.Object
    implements:
    - SaAddressApi.Net.Model.Interfaces.ISaAddress
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.SaAddressV4.Title
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.Title
      language: CSharp
      name:
        CSharp: Title
        VB: Title
      nameWithType:
        CSharp: SaAddressV4.Title
        VB: SaAddressV4.Title
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.Title
        VB: SaAddressApi.Net.Model.SaAddressV4.Title
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Title
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 12
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Title")]

            public string Title { get; set; }
          VB: >-
            <JsonProperty("Title")>

            Public Property Title As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.Title*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Title
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.Address1
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.Address1
      language: CSharp
      name:
        CSharp: Address1
        VB: Address1
      nameWithType:
        CSharp: SaAddressV4.Address1
        VB: SaAddressV4.Address1
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.Address1
        VB: SaAddressApi.Net.Model.SaAddressV4.Address1
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Address1
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 15
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Address1")]

            public string Address1 { get; set; }
          VB: >-
            <JsonProperty("Address1")>

            Public Property Address1 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.Address1*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Address1
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.Address2
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.Address2
      language: CSharp
      name:
        CSharp: Address2
        VB: Address2
      nameWithType:
        CSharp: SaAddressV4.Address2
        VB: SaAddressV4.Address2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.Address2
        VB: SaAddressApi.Net.Model.SaAddressV4.Address2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Address2
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 18
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Address2")]

            public string Address2 { get; set; }
          VB: >-
            <JsonProperty("Address2")>

            Public Property Address2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.Address2*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Address2
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
      language: CSharp
      name:
        CSharp: ObjLatLng
        VB: ObjLatLng
      nameWithType:
        CSharp: SaAddressV4.ObjLatLng
        VB: SaAddressV4.ObjLatLng
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
        VB: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ObjLatLng
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 21
      syntax:
        content:
          CSharp: >-
            [JsonProperty("ObjLatLng")]

            public string ObjLatLng { get; set; }
          VB: >-
            <JsonProperty("ObjLatLng")>

            Public Property ObjLatLng As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: ObjLatLng
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
      language: CSharp
      name:
        CSharp: BuildingNumber
        VB: BuildingNumber
      nameWithType:
        CSharp: SaAddressV4.BuildingNumber
        VB: SaAddressV4.BuildingNumber
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
        VB: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: BuildingNumber
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 24
      syntax:
        content:
          CSharp: >-
            [JsonProperty("BuildingNumber")]

            public string BuildingNumber { get; set; }
          VB: >-
            <JsonProperty("BuildingNumber")>

            Public Property BuildingNumber As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: BuildingNumber
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.Street
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.Street
      language: CSharp
      name:
        CSharp: Street
        VB: Street
      nameWithType:
        CSharp: SaAddressV4.Street
        VB: SaAddressV4.Street
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.Street
        VB: SaAddressApi.Net.Model.SaAddressV4.Street
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Street
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 27
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Street")]

            public string Street { get; set; }
          VB: >-
            <JsonProperty("Street")>

            Public Property Street As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.Street*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Street
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.District
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.District
      language: CSharp
      name:
        CSharp: District
        VB: District
      nameWithType:
        CSharp: SaAddressV4.District
        VB: SaAddressV4.District
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.District
        VB: SaAddressApi.Net.Model.SaAddressV4.District
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: District
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 30
      syntax:
        content:
          CSharp: >-
            [JsonProperty("District")]

            public string District { get; set; }
          VB: >-
            <JsonProperty("District")>

            Public Property District As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.District*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: District
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.City
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.City
      language: CSharp
      name:
        CSharp: City
        VB: City
      nameWithType:
        CSharp: SaAddressV4.City
        VB: SaAddressV4.City
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.City
        VB: SaAddressApi.Net.Model.SaAddressV4.City
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: City
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 33
      syntax:
        content:
          CSharp: >-
            [JsonProperty("City")]

            public string City { get; set; }
          VB: >-
            <JsonProperty("City")>

            Public Property City As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.City*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: City
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.PostCode
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.PostCode
      language: CSharp
      name:
        CSharp: PostCode
        VB: PostCode
      nameWithType:
        CSharp: SaAddressV4.PostCode
        VB: SaAddressV4.PostCode
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.PostCode
        VB: SaAddressApi.Net.Model.SaAddressV4.PostCode
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PostCode
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 36
      syntax:
        content:
          CSharp: >-
            [JsonProperty("PostCode")]

            public string PostCode { get; set; }
          VB: >-
            <JsonProperty("PostCode")>

            Public Property PostCode As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.PostCode*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: PostCode
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
      language: CSharp
      name:
        CSharp: AdditionalNumber
        VB: AdditionalNumber
      nameWithType:
        CSharp: SaAddressV4.AdditionalNumber
        VB: SaAddressV4.AdditionalNumber
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
        VB: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AdditionalNumber
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 39
      syntax:
        content:
          CSharp: >-
            [JsonProperty("AdditionalNumber")]

            public string AdditionalNumber { get; set; }
          VB: >-
            <JsonProperty("AdditionalNumber")>

            Public Property AdditionalNumber As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: AdditionalNumber
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaAddressV4.RegionName
      commentId: P:SaAddressApi.Net.Model.SaAddressV4.RegionName
      language: CSharp
      name:
        CSharp: RegionName
        VB: RegionName
      nameWithType:
        CSharp: SaAddressV4.RegionName
        VB: SaAddressV4.RegionName
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaAddressV4.RegionName
        VB: SaAddressApi.Net.Model.SaAddressV4.RegionName
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaAddressV4.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: RegionName
        path: ../SaAddressApi.Net/Model/SaAddressV4.cs
        startLine: 42
      syntax:
        content:
          CSharp: >-
            [JsonProperty("RegionName")]

            public string RegionName { get; set; }
          VB: >-
            <JsonProperty("RegionName")>

            Public Property RegionName As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaAddressV4.RegionName*
      implements:
      - SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: RegionName
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.SaLookup
    commentId: T:SaAddressApi.Net.Model.SaLookup
    language: CSharp
    name:
      CSharp: SaLookup
      VB: SaLookup
    nameWithType:
      CSharp: SaLookup
      VB: SaLookup
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.SaLookup
      VB: SaAddressApi.Net.Model.SaLookup
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model
    source:
      remote:
        path: SaAddressApi.Net/Model/SaLookup.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaLookup
      path: ../SaAddressApi.Net/Model/SaLookup.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class SaLookup
        VB: Public Class SaLookup
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.SaLookup.Id
      commentId: P:SaAddressApi.Net.Model.SaLookup.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: SaLookup.Id
        VB: SaLookup.Id
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaLookup.Id
        VB: SaAddressApi.Net.Model.SaLookup.Id
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaLookup.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Id
        path: ../SaAddressApi.Net/Model/SaLookup.cs
        startLine: 11
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Id")]

            public string Id { get; set; }
          VB: >-
            <JsonProperty("Id")>

            Public Property Id As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaLookup.Id*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Id
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaLookup.Name
      commentId: P:SaAddressApi.Net.Model.SaLookup.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: SaLookup.Name
        VB: SaLookup.Name
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaLookup.Name
        VB: SaAddressApi.Net.Model.SaLookup.Name
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaLookup.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Name
        path: ../SaAddressApi.Net/Model/SaLookup.cs
        startLine: 14
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Name")]

            public string Name { get; set; }
          VB: >-
            <JsonProperty("Name")>

            Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaLookup.Name*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Name
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.SaPostCodeObj
    commentId: T:SaAddressApi.Net.Model.SaPostCodeObj
    language: CSharp
    name:
      CSharp: SaPostCodeObj
      VB: SaPostCodeObj
    nameWithType:
      CSharp: SaPostCodeObj
      VB: SaPostCodeObj
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.SaPostCodeObj
      VB: SaAddressApi.Net.Model.SaPostCodeObj
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model
    source:
      remote:
        path: SaAddressApi.Net/Model/SaPostCodeObj.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: SaPostCodeObj
      path: ../SaAddressApi.Net/Model/SaPostCodeObj.cs
      startLine: 9
    syntax:
      content:
        CSharp: public class SaPostCodeObj
        VB: Public Class SaPostCodeObj
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.SaPostCodeObj.PostCode
      commentId: P:SaAddressApi.Net.Model.SaPostCodeObj.PostCode
      language: CSharp
      name:
        CSharp: PostCode
        VB: PostCode
      nameWithType:
        CSharp: SaPostCodeObj.PostCode
        VB: SaPostCodeObj.PostCode
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaPostCodeObj.PostCode
        VB: SaAddressApi.Net.Model.SaPostCodeObj.PostCode
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaPostCodeObj.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PostCode
        path: ../SaAddressApi.Net/Model/SaPostCodeObj.cs
        startLine: 11
      syntax:
        content:
          CSharp: >-
            [JsonProperty("postCode")]

            public string PostCode { get; set; }
          VB: >-
            <JsonProperty("postCode")>

            Public Property PostCode As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaPostCodeObj.PostCode*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: postCode
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaPostCodeObj.RegionName
      commentId: P:SaAddressApi.Net.Model.SaPostCodeObj.RegionName
      language: CSharp
      name:
        CSharp: RegionName
        VB: RegionName
      nameWithType:
        CSharp: SaPostCodeObj.RegionName
        VB: SaPostCodeObj.RegionName
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaPostCodeObj.RegionName
        VB: SaAddressApi.Net.Model.SaPostCodeObj.RegionName
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaPostCodeObj.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: RegionName
        path: ../SaAddressApi.Net/Model/SaPostCodeObj.cs
        startLine: 14
      syntax:
        content:
          CSharp: >-
            [JsonProperty("regionName")]

            public string RegionName { get; set; }
          VB: >-
            <JsonProperty("regionName")>

            Public Property RegionName As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaPostCodeObj.RegionName*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: regionName
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
      commentId: P:SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
      language: CSharp
      name:
        CSharp: HasParcels
        VB: HasParcels
      nameWithType:
        CSharp: SaPostCodeObj.HasParcels
        VB: SaPostCodeObj.HasParcels
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
        VB: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model
      source:
        remote:
          path: SaAddressApi.Net/Model/SaPostCodeObj.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: HasParcels
        path: ../SaAddressApi.Net/Model/SaPostCodeObj.cs
        startLine: 17
      syntax:
        content:
          CSharp: >-
            [JsonProperty("hasParcels")]

            public string HasParcels { get; set; }
          VB: >-
            <JsonProperty("hasParcels")>

            Public Property HasParcels As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: hasParcels
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: SaAddressApi.Net.Model.Base
  commentId: N:SaAddressApi.Net.Model.Base
  language: CSharp
  name:
    CSharp: SaAddressApi.Net.Model.Base
    VB: SaAddressApi.Net.Model.Base
  nameWithType:
    CSharp: SaAddressApi.Net.Model.Base
    VB: SaAddressApi.Net.Model.Base
  qualifiedName:
    CSharp: SaAddressApi.Net.Model.Base
    VB: SaAddressApi.Net.Model.Base
  type: Namespace
  assemblies:
  - SaAddressApi.Net
  modifiers: {}
  items:
  - id: SaAddressApi.Net.Model.Base.StatusDescription
    commentId: T:SaAddressApi.Net.Model.Base.StatusDescription
    language: CSharp
    name:
      CSharp: StatusDescription
      VB: StatusDescription
    nameWithType:
      CSharp: StatusDescription
      VB: StatusDescription
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Base.StatusDescription
      VB: SaAddressApi.Net.Model.Base.StatusDescription
    type: Enum
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Base
    source:
      remote:
        path: SaAddressApi.Net/Model/Base/BaseResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: StatusDescription
      path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
      startLine: 9
    syntax:
      content:
        CSharp: public enum StatusDescription
        VB: Public Enum StatusDescription
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: SaAddressApi.Net.Model.Base.StatusDescription.ServerException
      commentId: F:SaAddressApi.Net.Model.Base.StatusDescription.ServerException
      language: CSharp
      name:
        CSharp: ServerException
        VB: ServerException
      nameWithType:
        CSharp: StatusDescription.ServerException
        VB: StatusDescription.ServerException
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.StatusDescription.ServerException
        VB: SaAddressApi.Net.Model.Base.StatusDescription.ServerException
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ServerException
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 11
      syntax:
        content:
          CSharp: ServerException = 0
          VB: ServerException = 0
        return:
          type: SaAddressApi.Net.Model.Base.StatusDescription
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.Model.Base.StatusDescription.NoResults
      commentId: F:SaAddressApi.Net.Model.Base.StatusDescription.NoResults
      language: CSharp
      name:
        CSharp: NoResults
        VB: NoResults
      nameWithType:
        CSharp: StatusDescription.NoResults
        VB: StatusDescription.NoResults
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.StatusDescription.NoResults
        VB: SaAddressApi.Net.Model.Base.StatusDescription.NoResults
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: NoResults
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 12
      syntax:
        content:
          CSharp: NoResults = 1
          VB: NoResults = 1
        return:
          type: SaAddressApi.Net.Model.Base.StatusDescription
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: SaAddressApi.Net.Model.Base.StatusDescription.Success
      commentId: F:SaAddressApi.Net.Model.Base.StatusDescription.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: StatusDescription.Success
        VB: StatusDescription.Success
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.StatusDescription.Success
        VB: SaAddressApi.Net.Model.Base.StatusDescription.Success
      type: Field
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Success
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 13
      syntax:
        content:
          CSharp: Success = 2
          VB: Success = 2
        return:
          type: SaAddressApi.Net.Model.Base.StatusDescription
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: SaAddressApi.Net.Model.Base.BaseResponse
    commentId: T:SaAddressApi.Net.Model.Base.BaseResponse
    language: CSharp
    name:
      CSharp: BaseResponse
      VB: BaseResponse
    nameWithType:
      CSharp: BaseResponse
      VB: BaseResponse
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Base.BaseResponse
      VB: SaAddressApi.Net.Model.Base.BaseResponse
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Base
    source:
      remote:
        path: SaAddressApi.Net/Model/Base/BaseResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: BaseResponse
      path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
      startLine: 16
    syntax:
      content:
        CSharp: >-
          [JsonObject(MemberSerialization.OptIn)]

          public class BaseResponse
        VB: >-
          <JsonObject(MemberSerialization.OptIn)>

          Public Class BaseResponse
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: Newtonsoft.Json.JsonObjectAttribute
      ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
      arguments:
      - type: Newtonsoft.Json.MemberSerialization
        value: 1
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Base.BaseResponse.Success
      commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: BaseResponse.Success
        VB: BaseResponse.Success
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.BaseResponse.Success
        VB: SaAddressApi.Net.Model.Base.BaseResponse.Success
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Success
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 19
      syntax:
        content:
          CSharp: >-
            [JsonProperty("success")]

            public bool Success { get; set; }
          VB: >-
            <JsonProperty("success")>

            Public Property Success As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: SaAddressApi.Net.Model.Base.BaseResponse.Success*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: success
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
      commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
      language: CSharp
      name:
        CSharp: StatusDescription
        VB: StatusDescription
      nameWithType:
        CSharp: BaseResponse.StatusDescription
        VB: BaseResponse.StatusDescription
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
        VB: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: StatusDescription
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 22
      syntax:
        content:
          CSharp: >-
            [JsonProperty("statusdescription")]

            [JsonConverter(typeof(StatusConverter))]

            public StatusDescription StatusDescription { get; set; }
          VB: >-
            <JsonProperty("statusdescription")>

            <JsonConverter(GetType(StatusConverter))>

            Public Property StatusDescription As StatusDescription
        parameters: []
        return:
          type: SaAddressApi.Net.Model.Base.StatusDescription
      overload: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: statusdescription
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Base.BaseResponse.FullException
      commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.FullException
      language: CSharp
      name:
        CSharp: FullException
        VB: FullException
      nameWithType:
        CSharp: BaseResponse.FullException
        VB: BaseResponse.FullException
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Base.BaseResponse.FullException
        VB: SaAddressApi.Net.Model.Base.BaseResponse.FullException
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Base
      source:
        remote:
          path: SaAddressApi.Net/Model/Base/BaseResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: FullException
        path: ../SaAddressApi.Net/Model/Base/BaseResponse.cs
        startLine: 26
      syntax:
        content:
          CSharp: >-
            [JsonProperty("fullexception")]

            public string FullException { get; set; }
          VB: >-
            <JsonProperty("fullexception")>

            Public Property FullException As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Base.BaseResponse.FullException*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: fullexception
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: SaAddressApi.Net.Model.Interfaces
  commentId: N:SaAddressApi.Net.Model.Interfaces
  language: CSharp
  name:
    CSharp: SaAddressApi.Net.Model.Interfaces
    VB: SaAddressApi.Net.Model.Interfaces
  nameWithType:
    CSharp: SaAddressApi.Net.Model.Interfaces
    VB: SaAddressApi.Net.Model.Interfaces
  qualifiedName:
    CSharp: SaAddressApi.Net.Model.Interfaces
    VB: SaAddressApi.Net.Model.Interfaces
  type: Namespace
  assemblies:
  - SaAddressApi.Net
  modifiers: {}
  items:
  - id: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: T:SaAddressApi.Net.Model.Interfaces.ISaAddress
    language: CSharp
    name:
      CSharp: ISaAddress
      VB: ISaAddress
    nameWithType:
      CSharp: ISaAddress
      VB: ISaAddress
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress
      VB: SaAddressApi.Net.Model.Interfaces.ISaAddress
    type: Interface
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Interfaces
    source:
      remote:
        path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: ISaAddress
      path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
      startLine: 2
    syntax:
      content:
        CSharp: public interface ISaAddress
        VB: Public Interface ISaAddress
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      language: CSharp
      name:
        CSharp: Title
        VB: Title
      nameWithType:
        CSharp: ISaAddress.Title
        VB: ISaAddress.Title
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Title
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 4
      syntax:
        content:
          CSharp: string Title { get; set; }
          VB: Property Title As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      language: CSharp
      name:
        CSharp: Address1
        VB: Address1
      nameWithType:
        CSharp: ISaAddress.Address1
        VB: ISaAddress.Address1
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Address1
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 6
      syntax:
        content:
          CSharp: string Address1 { get; set; }
          VB: Property Address1 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      language: CSharp
      name:
        CSharp: Address2
        VB: Address2
      nameWithType:
        CSharp: ISaAddress.Address2
        VB: ISaAddress.Address2
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Address2
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 8
      syntax:
        content:
          CSharp: string Address2 { get; set; }
          VB: Property Address2 As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      language: CSharp
      name:
        CSharp: ObjLatLng
        VB: ObjLatLng
      nameWithType:
        CSharp: ISaAddress.ObjLatLng
        VB: ISaAddress.ObjLatLng
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ObjLatLng
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 10
      syntax:
        content:
          CSharp: string ObjLatLng { get; set; }
          VB: Property ObjLatLng As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      language: CSharp
      name:
        CSharp: BuildingNumber
        VB: BuildingNumber
      nameWithType:
        CSharp: ISaAddress.BuildingNumber
        VB: ISaAddress.BuildingNumber
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: BuildingNumber
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 12
      syntax:
        content:
          CSharp: string BuildingNumber { get; set; }
          VB: Property BuildingNumber As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      language: CSharp
      name:
        CSharp: Street
        VB: Street
      nameWithType:
        CSharp: ISaAddress.Street
        VB: ISaAddress.Street
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Street
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 14
      syntax:
        content:
          CSharp: string Street { get; set; }
          VB: Property Street As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      language: CSharp
      name:
        CSharp: District
        VB: District
      nameWithType:
        CSharp: ISaAddress.District
        VB: ISaAddress.District
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: District
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 16
      syntax:
        content:
          CSharp: string District { get; set; }
          VB: Property District As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.District*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      language: CSharp
      name:
        CSharp: City
        VB: City
      nameWithType:
        CSharp: ISaAddress.City
        VB: ISaAddress.City
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: City
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 18
      syntax:
        content:
          CSharp: string City { get; set; }
          VB: Property City As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.City*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      language: CSharp
      name:
        CSharp: PostCode
        VB: PostCode
      nameWithType:
        CSharp: ISaAddress.PostCode
        VB: ISaAddress.PostCode
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PostCode
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 20
      syntax:
        content:
          CSharp: string PostCode { get; set; }
          VB: Property PostCode As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      language: CSharp
      name:
        CSharp: AdditionalNumber
        VB: AdditionalNumber
      nameWithType:
        CSharp: ISaAddress.AdditionalNumber
        VB: ISaAddress.AdditionalNumber
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AdditionalNumber
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 22
      syntax:
        content:
          CSharp: string AdditionalNumber { get; set; }
          VB: Property AdditionalNumber As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      language: CSharp
      name:
        CSharp: RegionName
        VB: RegionName
      nameWithType:
        CSharp: ISaAddress.RegionName
        VB: ISaAddress.RegionName
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
        VB: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Interfaces
      source:
        remote:
          path: SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: RegionName
        path: ../SaAddressApi.Net/Model/Interfaces/ISaAddress.cs
        startLine: 24
      syntax:
        content:
          CSharp: string RegionName { get; set; }
          VB: Property RegionName As String
        parameters: []
        return:
          type: System.String
      overload: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
- id: SaAddressApi.Net.Model.Response
  commentId: N:SaAddressApi.Net.Model.Response
  language: CSharp
  name:
    CSharp: SaAddressApi.Net.Model.Response
    VB: SaAddressApi.Net.Model.Response
  nameWithType:
    CSharp: SaAddressApi.Net.Model.Response
    VB: SaAddressApi.Net.Model.Response
  qualifiedName:
    CSharp: SaAddressApi.Net.Model.Response
    VB: SaAddressApi.Net.Model.Response
  type: Namespace
  assemblies:
  - SaAddressApi.Net
  modifiers: {}
  items:
  - id: SaAddressApi.Net.Model.Response.AddressResponse`1
    commentId: T:SaAddressApi.Net.Model.Response.AddressResponse`1
    language: CSharp
    name:
      CSharp: AddressResponse<T>
      VB: AddressResponse(Of T)
    nameWithType:
      CSharp: AddressResponse<T>
      VB: AddressResponse(Of T)
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Response.AddressResponse<T>
      VB: SaAddressApi.Net.Model.Response.AddressResponse(Of T)
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Response
    source:
      remote:
        path: SaAddressApi.Net/Model/Response/AddressResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: AddressResponse
      path: ../SaAddressApi.Net/Model/Response/AddressResponse.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public class AddressResponse<T> : BaseResponse where T : ISaAddress'
        VB: >-
          Public Class AddressResponse(Of T As ISaAddress)

              Inherits BaseResponse
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    - SaAddressApi.Net.Model.Base.BaseResponse
    inheritedMembers:
    - SaAddressApi.Net.Model.Base.BaseResponse.Success
    - SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    - SaAddressApi.Net.Model.Base.BaseResponse.FullException
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults
      commentId: P:SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults
      language: CSharp
      name:
        CSharp: TotalSearchedResults
        VB: TotalSearchedResults
      nameWithType:
        CSharp: AddressResponse<T>.TotalSearchedResults
        VB: AddressResponse(Of T).TotalSearchedResults
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.AddressResponse<T>.TotalSearchedResults
        VB: SaAddressApi.Net.Model.Response.AddressResponse(Of T).TotalSearchedResults
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/AddressResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: TotalSearchedResults
        path: ../SaAddressApi.Net/Model/Response/AddressResponse.cs
        startLine: 8
      syntax:
        content:
          CSharp: >-
            [JsonProperty("totalSearchResults")]

            public int? TotalSearchedResults { get; set; }
          VB: >-
            <JsonProperty("totalSearchResults")>

            Public Property TotalSearchedResults As Integer?
        parameters: []
        return:
          type: System.Nullable{System.Int32}
      overload: SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: totalSearchResults
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses
      commentId: P:SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses
      language: CSharp
      name:
        CSharp: Addresses
        VB: Addresses
      nameWithType:
        CSharp: AddressResponse<T>.Addresses
        VB: AddressResponse(Of T).Addresses
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.AddressResponse<T>.Addresses
        VB: SaAddressApi.Net.Model.Response.AddressResponse(Of T).Addresses
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/AddressResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Addresses
        path: ../SaAddressApi.Net/Model/Response/AddressResponse.cs
        startLine: 11
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Addresses")]

            public T[] Addresses { get; set; }
          VB: >-
            <JsonProperty("Addresses")>

            Public Property Addresses As T()
        parameters: []
        return:
          type: '{T}[]'
      overload: SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Addresses
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode
      commentId: P:SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode
      language: CSharp
      name:
        CSharp: PostCode
        VB: PostCode
      nameWithType:
        CSharp: AddressResponse<T>.PostCode
        VB: AddressResponse(Of T).PostCode
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.AddressResponse<T>.PostCode
        VB: SaAddressApi.Net.Model.Response.AddressResponse(Of T).PostCode
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/AddressResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: PostCode
        path: ../SaAddressApi.Net/Model/Response/AddressResponse.cs
        startLine: 14
      syntax:
        content:
          CSharp: >-
            [JsonProperty("PostCode")]

            public SaPostCodeObj[] PostCode { get; set; }
          VB: >-
            <JsonProperty("PostCode")>

            Public Property PostCode As SaPostCodeObj()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaPostCodeObj[]
      overload: SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: PostCode
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
    commentId: T:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
    language: CSharp
    name:
      CSharp: ExtentsFeaturesResponse
      VB: ExtentsFeaturesResponse
    nameWithType:
      CSharp: ExtentsFeaturesResponse
      VB: ExtentsFeaturesResponse
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
      VB: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Response
    source:
      remote:
        path: SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: ExtentsFeaturesResponse
      path: ../SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public class ExtentsFeaturesResponse : BaseResponse'
        VB: >-
          Public Class ExtentsFeaturesResponse

              Inherits BaseResponse
    inheritance:
    - System.Object
    - SaAddressApi.Net.Model.Base.BaseResponse
    inheritedMembers:
    - SaAddressApi.Net.Model.Base.BaseResponse.Success
    - SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    - SaAddressApi.Net.Model.Base.BaseResponse.FullException
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
      commentId: P:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
      language: CSharp
      name:
        CSharp: NorthBound
        VB: NorthBound
      nameWithType:
        CSharp: ExtentsFeaturesResponse.NorthBound
        VB: ExtentsFeaturesResponse.NorthBound
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
        VB: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: NorthBound
        path: ../SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
        startLine: 11
      summary: "\nyMax\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [JsonProperty("maxy")]

            public double? NorthBound { get; set; }
          VB: >-
            <JsonProperty("maxy")>

            Public Property NorthBound As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: maxy
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
      commentId: P:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
      language: CSharp
      name:
        CSharp: SouthBound
        VB: SouthBound
      nameWithType:
        CSharp: ExtentsFeaturesResponse.SouthBound
        VB: ExtentsFeaturesResponse.SouthBound
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
        VB: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: SouthBound
        path: ../SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
        startLine: 17
      summary: "\nyMin\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [JsonProperty("miny")]

            public double? SouthBound { get; set; }
          VB: >-
            <JsonProperty("miny")>

            Public Property SouthBound As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: miny
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
      commentId: P:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
      language: CSharp
      name:
        CSharp: EastBound
        VB: EastBound
      nameWithType:
        CSharp: ExtentsFeaturesResponse.EastBound
        VB: ExtentsFeaturesResponse.EastBound
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
        VB: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: EastBound
        path: ../SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
        startLine: 23
      summary: "\nxMax\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [JsonProperty("maxx")]

            public double? EastBound { get; set; }
          VB: >-
            <JsonProperty("maxx")>

            Public Property EastBound As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: maxx
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
      commentId: P:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
      language: CSharp
      name:
        CSharp: WestBound
        VB: WestBound
      nameWithType:
        CSharp: ExtentsFeaturesResponse.WestBound
        VB: ExtentsFeaturesResponse.WestBound
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
        VB: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: WestBound
        path: ../SaAddressApi.Net/Model/Response/ExtentsFeaturesResponse.cs
        startLine: 29
      summary: "\nxMin\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [JsonProperty("minx")]

            public double? WestBound { get; set; }
          VB: >-
            <JsonProperty("minx")>

            Public Property WestBound As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: minx
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.Response.LookupResponse
    commentId: T:SaAddressApi.Net.Model.Response.LookupResponse
    language: CSharp
    name:
      CSharp: LookupResponse
      VB: LookupResponse
    nameWithType:
      CSharp: LookupResponse
      VB: LookupResponse
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Response.LookupResponse
      VB: SaAddressApi.Net.Model.Response.LookupResponse
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Response
    source:
      remote:
        path: SaAddressApi.Net/Model/Response/LookupResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: LookupResponse
      path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public class LookupResponse : BaseResponse'
        VB: >-
          Public Class LookupResponse

              Inherits BaseResponse
    inheritance:
    - System.Object
    - SaAddressApi.Net.Model.Base.BaseResponse
    inheritedMembers:
    - SaAddressApi.Net.Model.Base.BaseResponse.Success
    - SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    - SaAddressApi.Net.Model.Base.BaseResponse.FullException
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Response.LookupResponse.Regions
      commentId: P:SaAddressApi.Net.Model.Response.LookupResponse.Regions
      language: CSharp
      name:
        CSharp: Regions
        VB: Regions
      nameWithType:
        CSharp: LookupResponse.Regions
        VB: LookupResponse.Regions
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.LookupResponse.Regions
        VB: SaAddressApi.Net.Model.Response.LookupResponse.Regions
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/LookupResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Regions
        path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
        startLine: 7
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Regions")]

            public SaLookup[] Regions { get; set; }
          VB: >-
            <JsonProperty("Regions")>

            Public Property Regions As SaLookup()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaLookup[]
      overload: SaAddressApi.Net.Model.Response.LookupResponse.Regions*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Regions
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.LookupResponse.Cities
      commentId: P:SaAddressApi.Net.Model.Response.LookupResponse.Cities
      language: CSharp
      name:
        CSharp: Cities
        VB: Cities
      nameWithType:
        CSharp: LookupResponse.Cities
        VB: LookupResponse.Cities
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.LookupResponse.Cities
        VB: SaAddressApi.Net.Model.Response.LookupResponse.Cities
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/LookupResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Cities
        path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
        startLine: 10
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Cities")]

            public SaLookup[] Cities { get; set; }
          VB: >-
            <JsonProperty("Cities")>

            Public Property Cities As SaLookup()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaLookup[]
      overload: SaAddressApi.Net.Model.Response.LookupResponse.Cities*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Cities
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.LookupResponse.Districts
      commentId: P:SaAddressApi.Net.Model.Response.LookupResponse.Districts
      language: CSharp
      name:
        CSharp: Districts
        VB: Districts
      nameWithType:
        CSharp: LookupResponse.Districts
        VB: LookupResponse.Districts
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.LookupResponse.Districts
        VB: SaAddressApi.Net.Model.Response.LookupResponse.Districts
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/LookupResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: Districts
        path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
        startLine: 13
      syntax:
        content:
          CSharp: >-
            [JsonProperty("Districts")]

            public SaLookup[] Districts { get; set; }
          VB: >-
            <JsonProperty("Districts")>

            Public Property Districts As SaLookup()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaLookup[]
      overload: SaAddressApi.Net.Model.Response.LookupResponse.Districts*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Districts
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
      commentId: P:SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
      language: CSharp
      name:
        CSharp: ServiceCategories
        VB: ServiceCategories
      nameWithType:
        CSharp: LookupResponse.ServiceCategories
        VB: LookupResponse.ServiceCategories
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
        VB: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/LookupResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ServiceCategories
        path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
        startLine: 16
      syntax:
        content:
          CSharp: >-
            [JsonProperty("ServiceCategories")]

            public SaLookup[] ServiceCategories { get; set; }
          VB: >-
            <JsonProperty("ServiceCategories")>

            Public Property ServiceCategories As SaLookup()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaLookup[]
      overload: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: ServiceCategories
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
      commentId: P:SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
      language: CSharp
      name:
        CSharp: ServiceSubCategories
        VB: ServiceSubCategories
      nameWithType:
        CSharp: LookupResponse.ServiceSubCategories
        VB: LookupResponse.ServiceSubCategories
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
        VB: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/LookupResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: ServiceSubCategories
        path: ../SaAddressApi.Net/Model/Response/LookupResponse.cs
        startLine: 19
      syntax:
        content:
          CSharp: >-
            [JsonProperty("ServiceSubCategories")]

            public SaLookup[] ServiceSubCategories { get; set; }
          VB: >-
            <JsonProperty("ServiceSubCategories")>

            Public Property ServiceSubCategories As SaLookup()
        parameters: []
        return:
          type: SaAddressApi.Net.Model.SaLookup[]
      overload: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: ServiceSubCategories
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse
    commentId: T:SaAddressApi.Net.Model.Response.VerifyAddressResponse
    language: CSharp
    name:
      CSharp: VerifyAddressResponse
      VB: VerifyAddressResponse
    nameWithType:
      CSharp: VerifyAddressResponse
      VB: VerifyAddressResponse
    qualifiedName:
      CSharp: SaAddressApi.Net.Model.Response.VerifyAddressResponse
      VB: SaAddressApi.Net.Model.Response.VerifyAddressResponse
    type: Class
    assemblies:
    - SaAddressApi.Net
    namespace: SaAddressApi.Net.Model.Response
    source:
      remote:
        path: SaAddressApi.Net/Model/Response/VerifyAddressResponse.cs
        branch: multi-tenant-approach-v1
        repo: https://abudawood.visualstudio.com/_git/TeachAdults
      id: VerifyAddressResponse
      path: ../SaAddressApi.Net/Model/Response/VerifyAddressResponse.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public class VerifyAddressResponse : BaseResponse'
        VB: >-
          Public Class VerifyAddressResponse

              Inherits BaseResponse
    inheritance:
    - System.Object
    - SaAddressApi.Net.Model.Base.BaseResponse
    inheritedMembers:
    - SaAddressApi.Net.Model.Base.BaseResponse.Success
    - SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    - SaAddressApi.Net.Model.Base.BaseResponse.FullException
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
      commentId: P:SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
      language: CSharp
      name:
        CSharp: AddressFound
        VB: AddressFound
      nameWithType:
        CSharp: VerifyAddressResponse.AddressFound
        VB: VerifyAddressResponse.AddressFound
      qualifiedName:
        CSharp: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
        VB: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
      type: Property
      assemblies:
      - SaAddressApi.Net
      namespace: SaAddressApi.Net.Model.Response
      source:
        remote:
          path: SaAddressApi.Net/Model/Response/VerifyAddressResponse.cs
          branch: multi-tenant-approach-v1
          repo: https://abudawood.visualstudio.com/_git/TeachAdults
        id: AddressFound
        path: ../SaAddressApi.Net/Model/Response/VerifyAddressResponse.cs
        startLine: 7
      syntax:
        content:
          CSharp: >-
            [JsonProperty("addressfound")]

            public bool AddressFound { get; set; }
          VB: >-
            <JsonProperty("addressfound")>

            Public Property AddressFound As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound*
      attributes:
      - type: Newtonsoft.Json.JsonPropertyAttribute
        ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: addressfound
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  SaAddressApi.Net.SaAddressConfig.Register*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressConfig.Register*
        name: Register
        nameWithType: SaAddressConfig.Register
        qualifiedName: SaAddressApi.Net.SaAddressConfig.Register
      VB:
      - id: SaAddressApi.Net.SaAddressConfig.Register*
        name: Register
        nameWithType: SaAddressConfig.Register
        qualifiedName: SaAddressApi.Net.SaAddressConfig.Register
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressConfig.Register
  SaAddressApi.Net.SaAddressConfig:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressConfig
        name: SaAddressConfig
        nameWithType: SaAddressConfig
        qualifiedName: SaAddressApi.Net.SaAddressConfig
      VB:
      - id: SaAddressApi.Net.SaAddressConfig
        name: SaAddressConfig
        nameWithType: SaAddressConfig
        qualifiedName: SaAddressApi.Net.SaAddressConfig
    isDefinition: true
    commentId: T:SaAddressApi.Net.SaAddressConfig
  SaAddressApi.Net:
    name:
      CSharp:
      - name: SaAddressApi.Net
        nameWithType: SaAddressApi.Net
        qualifiedName: SaAddressApi.Net
      VB:
      - name: SaAddressApi.Net
        nameWithType: SaAddressApi.Net
        qualifiedName: SaAddressApi.Net
    isDefinition: true
    commentId: N:SaAddressApi.Net
  SaAddressApi.Net.LayerName:
    name:
      CSharp:
      - id: SaAddressApi.Net.LayerName
        name: LayerName
        nameWithType: LayerName
        qualifiedName: SaAddressApi.Net.LayerName
      VB:
      - id: SaAddressApi.Net.LayerName
        name: LayerName
        nameWithType: LayerName
        qualifiedName: SaAddressApi.Net.LayerName
    isDefinition: true
    parent: SaAddressApi.Net
    commentId: T:SaAddressApi.Net.LayerName
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  SaAddressApi.Net.SaAddressServices.#ctor*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.#ctor*
        name: SaAddressServices
        nameWithType: SaAddressServices.SaAddressServices
        qualifiedName: SaAddressApi.Net.SaAddressServices.SaAddressServices
      VB:
      - id: SaAddressApi.Net.SaAddressServices.#ctor*
        name: SaAddressServices
        nameWithType: SaAddressServices.SaAddressServices
        qualifiedName: SaAddressApi.Net.SaAddressServices.SaAddressServices
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.#ctor
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
        isExternal: true
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV4}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.SaAddressV4
        name: SaAddressV4
        nameWithType: SaAddressV4
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.SaAddressV4
        name: SaAddressV4
        nameWithType: SaAddressV4
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV4}}
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync*
        name: AddressV4FreeTextAsync
        nameWithType: SaAddressServices.AddressV4FreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync*
        name: AddressV4FreeTextAsync
        nameWithType: SaAddressServices.AddressV4FreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.AddressV4FreeTextAsync
  System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.SaAddressV3
        name: SaAddressV3
        nameWithType: SaAddressV3
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.SaAddressV3
        name: SaAddressV3
        nameWithType: SaAddressV3
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.AddressResponse{SaAddressApi.Net.Model.SaAddressV3}}
  SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync*
        name: AddressV3FreeTextAsync
        nameWithType: SaAddressServices.AddressV3FreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync*
        name: AddressV3FreeTextAsync
        nameWithType: SaAddressServices.AddressV3FreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.AddressV3FreeTextAsync
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync*
        name: AddressByGeocodeAsync
        nameWithType: SaAddressServices.AddressByGeocodeAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync*
        name: AddressByGeocodeAsync
        nameWithType: SaAddressServices.AddressByGeocodeAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.AddressByGeocodeAsync
  SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync*
        name: AddressFixedParamsAsync
        nameWithType: SaAddressServices.AddressFixedParamsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync*
        name: AddressFixedParamsAsync
        nameWithType: SaAddressServices.AddressFixedParamsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.AddressFixedParamsAsync
  System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.VerifyAddressResponse}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse
        name: VerifyAddressResponse
        nameWithType: VerifyAddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse
        name: VerifyAddressResponse
        nameWithType: VerifyAddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.VerifyAddressResponse}
  SaAddressApi.Net.SaAddressServices.VerifyAddressAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync*
        name: VerifyAddressAsync
        nameWithType: SaAddressServices.VerifyAddressAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync*
        name: VerifyAddressAsync
        nameWithType: SaAddressServices.VerifyAddressAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.VerifyAddressAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.VerifyAddressAsync
  SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync*
        name: PoiFreeTextAsync
        nameWithType: SaAddressServices.PoiFreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync*
        name: PoiFreeTextAsync
        nameWithType: SaAddressServices.PoiFreeTextAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.PoiFreeTextAsync
  SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync*
        name: PoiFixedParamsAsync
        nameWithType: SaAddressServices.PoiFixedParamsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync*
        name: PoiFixedParamsAsync
        nameWithType: SaAddressServices.PoiFixedParamsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.PoiFixedParamsAsync
  System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.Response.LookupResponse
        name: LookupResponse
        nameWithType: LookupResponse
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.Response.LookupResponse
        name: LookupResponse
        nameWithType: LookupResponse
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.LookupResponse}
  SaAddressApi.Net.SaAddressServices.LookupRegionsAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync*
        name: LookupRegionsAsync
        nameWithType: SaAddressServices.LookupRegionsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync*
        name: LookupRegionsAsync
        nameWithType: SaAddressServices.LookupRegionsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupRegionsAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.LookupRegionsAsync
  SaAddressApi.Net.SaAddressServices.LookupCitiesAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync*
        name: LookupCitiesAsync
        nameWithType: SaAddressServices.LookupCitiesAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync*
        name: LookupCitiesAsync
        nameWithType: SaAddressServices.LookupCitiesAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupCitiesAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.LookupCitiesAsync
  SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync*
        name: LookupDistrictsAsync
        nameWithType: SaAddressServices.LookupDistrictsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync*
        name: LookupDistrictsAsync
        nameWithType: SaAddressServices.LookupDistrictsAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.LookupDistrictsAsync
  SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync*
        name: LookupServiceCategoryAsync
        nameWithType: SaAddressServices.LookupServiceCategoryAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync*
        name: LookupServiceCategoryAsync
        nameWithType: SaAddressServices.LookupServiceCategoryAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.LookupServiceCategoryAsync
  SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync*
        name: LookupSubserviceCategoryAsync
        nameWithType: SaAddressServices.LookupSubserviceCategoryAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync*
        name: LookupSubserviceCategoryAsync
        nameWithType: SaAddressServices.LookupSubserviceCategoryAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.LookupSubserviceCategoryAsync
  SaAddressApi.Net.SaAddressServices.BulkSearchAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.BulkSearchAsync*
        name: BulkSearchAsync
        nameWithType: SaAddressServices.BulkSearchAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.BulkSearchAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.BulkSearchAsync*
        name: BulkSearchAsync
        nameWithType: SaAddressServices.BulkSearchAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.BulkSearchAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.BulkSearchAsync
  SaAddressApi.Net.SaAddressServices.NearestPoiAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.NearestPoiAsync*
        name: NearestPoiAsync
        nameWithType: SaAddressServices.NearestPoiAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.NearestPoiAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.NearestPoiAsync*
        name: NearestPoiAsync
        nameWithType: SaAddressServices.NearestPoiAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.NearestPoiAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.NearestPoiAsync
  System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
        name: ExtentsFeaturesResponse
        nameWithType: ExtentsFeaturesResponse
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
        name: ExtentsFeaturesResponse
        nameWithType: ExtentsFeaturesResponse
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse}
  SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync*:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync*
        name: ExtentsFeaturesAsync
        nameWithType: SaAddressServices.ExtentsFeaturesAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync
      VB:
      - id: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync*
        name: ExtentsFeaturesAsync
        nameWithType: SaAddressServices.ExtentsFeaturesAsync
        qualifiedName: SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.SaAddressServices.ExtentsFeaturesAsync
  SaAddressApi.Net.SaAddressServices:
    name:
      CSharp:
      - id: SaAddressApi.Net.SaAddressServices
        name: SaAddressServices
        nameWithType: SaAddressServices
        qualifiedName: SaAddressApi.Net.SaAddressServices
      VB:
      - id: SaAddressApi.Net.SaAddressServices
        name: SaAddressServices
        nameWithType: SaAddressServices
        qualifiedName: SaAddressApi.Net.SaAddressServices
    isDefinition: true
    commentId: T:SaAddressApi.Net.SaAddressServices
  SaAddressApi.Net.Model.Interfaces.ISaAddress:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress
        name: ISaAddress
        nameWithType: ISaAddress
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress
        name: ISaAddress
        nameWithType: ISaAddress
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces
    commentId: T:SaAddressApi.Net.Model.Interfaces.ISaAddress
  SaAddressApi.Net.Model.SaAddressV3:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3
        name: SaAddressV3
        nameWithType: SaAddressV3
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3
        name: SaAddressV3
        nameWithType: SaAddressV3
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.SaAddressV3
  SaAddressApi.Net.Model.SaAddressV4:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4
        name: SaAddressV4
        nameWithType: SaAddressV4
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4
        name: SaAddressV4
        nameWithType: SaAddressV4
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4
    isDefinition: true
    parent: SaAddressApi.Net.Model
    commentId: T:SaAddressApi.Net.Model.SaAddressV4
  System.ArgumentNullException:
    commentId: T:System.ArgumentNullException
  SaAddressApi.Net.Model.Interfaces:
    name:
      CSharp:
      - name: SaAddressApi.Net.Model.Interfaces
        nameWithType: SaAddressApi.Net.Model.Interfaces
        qualifiedName: SaAddressApi.Net.Model.Interfaces
      VB:
      - name: SaAddressApi.Net.Model.Interfaces
        nameWithType: SaAddressApi.Net.Model.Interfaces
        qualifiedName: SaAddressApi.Net.Model.Interfaces
    isDefinition: true
    commentId: N:SaAddressApi.Net.Model.Interfaces
  SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress*
        name: ConvertToArbicFormattedAddress
        nameWithType: Helper.ConvertToArbicFormattedAddress
        qualifiedName: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress
      VB:
      - id: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress*
        name: ConvertToArbicFormattedAddress
        nameWithType: Helper.ConvertToArbicFormattedAddress
        qualifiedName: SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Helper.ConvertToArbicFormattedAddress
  SaAddressApi.Net.Model.Helper:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Helper
        name: Helper
        nameWithType: Helper
        qualifiedName: SaAddressApi.Net.Model.Helper
      VB:
      - id: SaAddressApi.Net.Model.Helper
        name: Helper
        nameWithType: Helper
        qualifiedName: SaAddressApi.Net.Model.Helper
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.Helper
  SaAddressApi.Net.Model:
    name:
      CSharp:
      - name: SaAddressApi.Net.Model
        nameWithType: SaAddressApi.Net.Model
        qualifiedName: SaAddressApi.Net.Model
      VB:
      - name: SaAddressApi.Net.Model
        nameWithType: SaAddressApi.Net.Model
        qualifiedName: SaAddressApi.Net.Model
    isDefinition: true
    commentId: N:SaAddressApi.Net.Model
  SaAddressApi.Net.Model.SaAddressV4.Title:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Title
        name: Title
        nameWithType: SaAddressV4.Title
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Title
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Title
        name: Title
        nameWithType: SaAddressV4.Title
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Title
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.Title
  SaAddressApi.Net.Model.SaAddressV4.Address1:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address1
        name: Address1
        nameWithType: SaAddressV4.Address1
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address1
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address1
        name: Address1
        nameWithType: SaAddressV4.Address1
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address1
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.Address1
  SaAddressApi.Net.Model.SaAddressV4.Address2:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address2
        name: Address2
        nameWithType: SaAddressV4.Address2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address2
        name: Address2
        nameWithType: SaAddressV4.Address2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address2
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.Address2
  SaAddressApi.Net.Model.SaAddressV4.ObjLatLng:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
        name: ObjLatLng
        nameWithType: SaAddressV4.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
        name: ObjLatLng
        nameWithType: SaAddressV4.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
  SaAddressApi.Net.Model.SaAddressV4.BuildingNumber:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
        name: BuildingNumber
        nameWithType: SaAddressV4.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
        name: BuildingNumber
        nameWithType: SaAddressV4.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
  SaAddressApi.Net.Model.SaAddressV4.Street:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Street
        name: Street
        nameWithType: SaAddressV4.Street
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Street
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Street
        name: Street
        nameWithType: SaAddressV4.Street
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Street
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.Street
  SaAddressApi.Net.Model.SaAddressV4.District:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.District
        name: District
        nameWithType: SaAddressV4.District
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.District
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.District
        name: District
        nameWithType: SaAddressV4.District
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.District
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.District
  SaAddressApi.Net.Model.SaAddressV4.City:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.City
        name: City
        nameWithType: SaAddressV4.City
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.City
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.City
        name: City
        nameWithType: SaAddressV4.City
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.City
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.City
  SaAddressApi.Net.Model.SaAddressV4.PostCode:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.PostCode
        name: PostCode
        nameWithType: SaAddressV4.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.PostCode
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.PostCode
        name: PostCode
        nameWithType: SaAddressV4.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.PostCode
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.PostCode
  SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
        name: AdditionalNumber
        nameWithType: SaAddressV4.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
        name: AdditionalNumber
        nameWithType: SaAddressV4.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
  SaAddressApi.Net.Model.SaAddressV4.RegionName:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.RegionName
        name: RegionName
        nameWithType: SaAddressV4.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.RegionName
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.RegionName
        name: RegionName
        nameWithType: SaAddressV4.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.RegionName
    isDefinition: true
    parent: SaAddressApi.Net.Model.SaAddressV4
    commentId: P:SaAddressApi.Net.Model.SaAddressV4.RegionName
  SaAddressApi.Net.Model.SaAddressV3.PolygonString*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.PolygonString*
        name: PolygonString
        nameWithType: SaAddressV3.PolygonString
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.PolygonString
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.PolygonString*
        name: PolygonString
        nameWithType: SaAddressV3.PolygonString
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.PolygonString
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.PolygonString
  Newtonsoft.Json:
    name:
      CSharp:
      - name: Newtonsoft.Json
        nameWithType: Newtonsoft.Json
        qualifiedName: Newtonsoft.Json
        isExternal: true
      VB:
      - name: Newtonsoft.Json
        nameWithType: Newtonsoft.Json
        qualifiedName: Newtonsoft.Json
    isDefinition: true
    commentId: N:Newtonsoft.Json
  Newtonsoft.Json.JsonPropertyAttribute:
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonPropertyAttribute
        name: JsonPropertyAttribute
        nameWithType: JsonPropertyAttribute
        qualifiedName: Newtonsoft.Json.JsonPropertyAttribute
        isExternal: true
      VB:
      - id: Newtonsoft.Json.JsonPropertyAttribute
        name: JsonPropertyAttribute
        nameWithType: JsonPropertyAttribute
        qualifiedName: Newtonsoft.Json.JsonPropertyAttribute
        isExternal: true
    isDefinition: true
    parent: Newtonsoft.Json
    commentId: T:Newtonsoft.Json.JsonPropertyAttribute
  Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String):
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        name: JsonPropertyAttribute
        nameWithType: JsonPropertyAttribute.JsonPropertyAttribute
        qualifiedName: Newtonsoft.Json.JsonPropertyAttribute.JsonPropertyAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
        name: JsonPropertyAttribute
        nameWithType: JsonPropertyAttribute.JsonPropertyAttribute
        qualifiedName: Newtonsoft.Json.JsonPropertyAttribute.JsonPropertyAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Newtonsoft.Json.JsonPropertyAttribute
    commentId: M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
  SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress*
        name: IsPrimaryAddress
        nameWithType: SaAddressV3.IsPrimaryAddress
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress*
        name: IsPrimaryAddress
        nameWithType: SaAddressV3.IsPrimaryAddress
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.IsPrimaryAddress
  SaAddressApi.Net.Model.SaAddressV3.UnitNumber*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.UnitNumber*
        name: UnitNumber
        nameWithType: SaAddressV3.UnitNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.UnitNumber
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.UnitNumber*
        name: UnitNumber
        nameWithType: SaAddressV3.UnitNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.UnitNumber
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.UnitNumber
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System.Nullable{System.Double}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Double}
  SaAddressApi.Net.Model.SaAddressV3.Latitude*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.Latitude*
        name: Latitude
        nameWithType: SaAddressV3.Latitude
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Latitude
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.Latitude*
        name: Latitude
        nameWithType: SaAddressV3.Latitude
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Latitude
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.Latitude
  SaAddressApi.Net.Model.SaAddressV3.Longitude*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.Longitude*
        name: Longitude
        nameWithType: SaAddressV3.Longitude
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Longitude
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.Longitude*
        name: Longitude
        nameWithType: SaAddressV3.Longitude
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Longitude
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.Longitude
  SaAddressApi.Net.Model.SaAddressV3.CityId*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.CityId*
        name: CityId
        nameWithType: SaAddressV3.CityId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CityId
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.CityId*
        name: CityId
        nameWithType: SaAddressV3.CityId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CityId
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.CityId
  SaAddressApi.Net.Model.SaAddressV3.RegionId*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.RegionId*
        name: RegionId
        nameWithType: SaAddressV3.RegionId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.RegionId
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.RegionId*
        name: RegionId
        nameWithType: SaAddressV3.RegionId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.RegionId
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.RegionId
  SaAddressApi.Net.Model.SaAddressV3.Restriction*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.Restriction*
        name: Restriction
        nameWithType: SaAddressV3.Restriction
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Restriction
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.Restriction*
        name: Restriction
        nameWithType: SaAddressV3.Restriction
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Restriction
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.Restriction
  SaAddressApi.Net.Model.SaAddressV3.PKAddressId*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.PKAddressId*
        name: PKAddressId
        nameWithType: SaAddressV3.PKAddressId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.PKAddressId
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.PKAddressId*
        name: PKAddressId
        nameWithType: SaAddressV3.PKAddressId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.PKAddressId
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.PKAddressId
  SaAddressApi.Net.Model.SaAddressV3.DistrictId*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.DistrictId*
        name: DistrictId
        nameWithType: SaAddressV3.DistrictId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.DistrictId
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.DistrictId*
        name: DistrictId
        nameWithType: SaAddressV3.DistrictId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.DistrictId
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.DistrictId
  SaAddressApi.Net.Model.SaAddressV3.TitleL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.TitleL2*
        name: TitleL2
        nameWithType: SaAddressV3.TitleL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.TitleL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.TitleL2*
        name: TitleL2
        nameWithType: SaAddressV3.TitleL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.TitleL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.TitleL2
  SaAddressApi.Net.Model.SaAddressV3.RegionNameL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2*
        name: RegionNameL2
        nameWithType: SaAddressV3.RegionNameL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2*
        name: RegionNameL2
        nameWithType: SaAddressV3.RegionNameL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.RegionNameL2
  SaAddressApi.Net.Model.SaAddressV3.CityL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.CityL2*
        name: CityL2
        nameWithType: SaAddressV3.CityL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CityL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.CityL2*
        name: CityL2
        nameWithType: SaAddressV3.CityL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CityL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.CityL2
  SaAddressApi.Net.Model.SaAddressV3.StreetL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.StreetL2*
        name: StreetL2
        nameWithType: SaAddressV3.StreetL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.StreetL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.StreetL2*
        name: StreetL2
        nameWithType: SaAddressV3.StreetL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.StreetL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.StreetL2
  SaAddressApi.Net.Model.SaAddressV3.DistrictL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.DistrictL2*
        name: DistrictL2
        nameWithType: SaAddressV3.DistrictL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.DistrictL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.DistrictL2*
        name: DistrictL2
        nameWithType: SaAddressV3.DistrictL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.DistrictL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.DistrictL2
  SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2*
        name: CompanyNameL2
        nameWithType: SaAddressV3.CompanyNameL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2*
        name: CompanyNameL2
        nameWithType: SaAddressV3.CompanyNameL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.CompanyNameL2
  SaAddressApi.Net.Model.SaAddressV3.GovernorateId*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateId*
        name: GovernorateId
        nameWithType: SaAddressV3.GovernorateId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.GovernorateId
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateId*
        name: GovernorateId
        nameWithType: SaAddressV3.GovernorateId
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.GovernorateId
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.GovernorateId
  SaAddressApi.Net.Model.SaAddressV3.Governorate*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.Governorate*
        name: Governorate
        nameWithType: SaAddressV3.Governorate
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Governorate
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.Governorate*
        name: Governorate
        nameWithType: SaAddressV3.Governorate
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.Governorate
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.Governorate
  SaAddressApi.Net.Model.SaAddressV3.GovernorateL2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2*
        name: GovernorateL2
        nameWithType: SaAddressV3.GovernorateL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2*
        name: GovernorateL2
        nameWithType: SaAddressV3.GovernorateL2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV3.GovernorateL2
  SaAddressApi.Net.Model.SaAddressV4.Title*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Title*
        name: Title
        nameWithType: SaAddressV4.Title
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Title
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Title*
        name: Title
        nameWithType: SaAddressV4.Title
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Title
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.Title
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Title:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
        name: Title
        nameWithType: ISaAddress.Title
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
        name: Title
        nameWithType: ISaAddress.Title
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
  SaAddressApi.Net.Model.SaAddressV4.Address1*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address1*
        name: Address1
        nameWithType: SaAddressV4.Address1
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address1
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address1*
        name: Address1
        nameWithType: SaAddressV4.Address1
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address1
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.Address1
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
        name: Address1
        nameWithType: ISaAddress.Address1
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
        name: Address1
        nameWithType: ISaAddress.Address1
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
  SaAddressApi.Net.Model.SaAddressV4.Address2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address2*
        name: Address2
        nameWithType: SaAddressV4.Address2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address2
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Address2*
        name: Address2
        nameWithType: SaAddressV4.Address2
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Address2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.Address2
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
        name: Address2
        nameWithType: ISaAddress.Address2
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
        name: Address2
        nameWithType: ISaAddress.Address2
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
  SaAddressApi.Net.Model.SaAddressV4.ObjLatLng*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng*
        name: ObjLatLng
        nameWithType: SaAddressV4.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng*
        name: ObjLatLng
        nameWithType: SaAddressV4.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.ObjLatLng
  SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
        name: ObjLatLng
        nameWithType: ISaAddress.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
        name: ObjLatLng
        nameWithType: ISaAddress.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
  SaAddressApi.Net.Model.SaAddressV4.BuildingNumber*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber*
        name: BuildingNumber
        nameWithType: SaAddressV4.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber*
        name: BuildingNumber
        nameWithType: SaAddressV4.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.BuildingNumber
  SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
        name: BuildingNumber
        nameWithType: ISaAddress.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
        name: BuildingNumber
        nameWithType: ISaAddress.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
  SaAddressApi.Net.Model.SaAddressV4.Street*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.Street*
        name: Street
        nameWithType: SaAddressV4.Street
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Street
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.Street*
        name: Street
        nameWithType: SaAddressV4.Street
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.Street
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.Street
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Street:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
        name: Street
        nameWithType: ISaAddress.Street
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
        name: Street
        nameWithType: ISaAddress.Street
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
  SaAddressApi.Net.Model.SaAddressV4.District*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.District*
        name: District
        nameWithType: SaAddressV4.District
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.District
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.District*
        name: District
        nameWithType: SaAddressV4.District
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.District
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.District
  SaAddressApi.Net.Model.Interfaces.ISaAddress.District:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
        name: District
        nameWithType: ISaAddress.District
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
        name: District
        nameWithType: ISaAddress.District
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.District
  SaAddressApi.Net.Model.SaAddressV4.City*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.City*
        name: City
        nameWithType: SaAddressV4.City
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.City
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.City*
        name: City
        nameWithType: SaAddressV4.City
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.City
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.City
  SaAddressApi.Net.Model.Interfaces.ISaAddress.City:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
        name: City
        nameWithType: ISaAddress.City
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
        name: City
        nameWithType: ISaAddress.City
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.City
  SaAddressApi.Net.Model.SaAddressV4.PostCode*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.PostCode*
        name: PostCode
        nameWithType: SaAddressV4.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.PostCode
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.PostCode*
        name: PostCode
        nameWithType: SaAddressV4.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.PostCode
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.PostCode
  SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
        name: PostCode
        nameWithType: ISaAddress.PostCode
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
        name: PostCode
        nameWithType: ISaAddress.PostCode
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
  SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber*
        name: AdditionalNumber
        nameWithType: SaAddressV4.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber*
        name: AdditionalNumber
        nameWithType: SaAddressV4.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.AdditionalNumber
  SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
        name: AdditionalNumber
        nameWithType: ISaAddress.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
        name: AdditionalNumber
        nameWithType: ISaAddress.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
  SaAddressApi.Net.Model.SaAddressV4.RegionName*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaAddressV4.RegionName*
        name: RegionName
        nameWithType: SaAddressV4.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.RegionName
      VB:
      - id: SaAddressApi.Net.Model.SaAddressV4.RegionName*
        name: RegionName
        nameWithType: SaAddressV4.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaAddressV4.RegionName
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaAddressV4.RegionName
  SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
        name: RegionName
        nameWithType: ISaAddress.RegionName
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
        name: RegionName
        nameWithType: ISaAddress.RegionName
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
    isDefinition: true
    parent: SaAddressApi.Net.Model.Interfaces.ISaAddress
    commentId: P:SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
  SaAddressApi.Net.Model.SaLookup.Id*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaLookup.Id*
        name: Id
        nameWithType: SaLookup.Id
        qualifiedName: SaAddressApi.Net.Model.SaLookup.Id
      VB:
      - id: SaAddressApi.Net.Model.SaLookup.Id*
        name: Id
        nameWithType: SaLookup.Id
        qualifiedName: SaAddressApi.Net.Model.SaLookup.Id
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaLookup.Id
  SaAddressApi.Net.Model.SaLookup.Name*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaLookup.Name*
        name: Name
        nameWithType: SaLookup.Name
        qualifiedName: SaAddressApi.Net.Model.SaLookup.Name
      VB:
      - id: SaAddressApi.Net.Model.SaLookup.Name*
        name: Name
        nameWithType: SaLookup.Name
        qualifiedName: SaAddressApi.Net.Model.SaLookup.Name
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaLookup.Name
  SaAddressApi.Net.Model.SaLookup:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaLookup
        name: SaLookup
        nameWithType: SaLookup
        qualifiedName: SaAddressApi.Net.Model.SaLookup
      VB:
      - id: SaAddressApi.Net.Model.SaLookup
        name: SaLookup
        nameWithType: SaLookup
        qualifiedName: SaAddressApi.Net.Model.SaLookup
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.SaLookup
  SaAddressApi.Net.Model.SaPostCodeObj.PostCode*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.PostCode*
        name: PostCode
        nameWithType: SaPostCodeObj.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.PostCode
      VB:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.PostCode*
        name: PostCode
        nameWithType: SaPostCodeObj.PostCode
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.PostCode
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaPostCodeObj.PostCode
  SaAddressApi.Net.Model.SaPostCodeObj.RegionName*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.RegionName*
        name: RegionName
        nameWithType: SaPostCodeObj.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.RegionName
      VB:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.RegionName*
        name: RegionName
        nameWithType: SaPostCodeObj.RegionName
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.RegionName
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaPostCodeObj.RegionName
  SaAddressApi.Net.Model.SaPostCodeObj.HasParcels*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels*
        name: HasParcels
        nameWithType: SaPostCodeObj.HasParcels
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
      VB:
      - id: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels*
        name: HasParcels
        nameWithType: SaPostCodeObj.HasParcels
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.SaPostCodeObj.HasParcels
  SaAddressApi.Net.Model.SaPostCodeObj:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaPostCodeObj
        name: SaPostCodeObj
        nameWithType: SaPostCodeObj
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj
      VB:
      - id: SaAddressApi.Net.Model.SaPostCodeObj
        name: SaPostCodeObj
        nameWithType: SaPostCodeObj
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.SaPostCodeObj
  SaAddressApi.Net.Model.Base:
    name:
      CSharp:
      - name: SaAddressApi.Net.Model.Base
        nameWithType: SaAddressApi.Net.Model.Base
        qualifiedName: SaAddressApi.Net.Model.Base
      VB:
      - name: SaAddressApi.Net.Model.Base
        nameWithType: SaAddressApi.Net.Model.Base
        qualifiedName: SaAddressApi.Net.Model.Base
    isDefinition: true
    commentId: N:SaAddressApi.Net.Model.Base
  SaAddressApi.Net.Model.Base.StatusDescription:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.StatusDescription
        name: StatusDescription
        nameWithType: StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.StatusDescription
      VB:
      - id: SaAddressApi.Net.Model.Base.StatusDescription
        name: StatusDescription
        nameWithType: StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.StatusDescription
    isDefinition: true
    parent: SaAddressApi.Net.Model.Base
    commentId: T:SaAddressApi.Net.Model.Base.StatusDescription
  SaAddressApi.Net.Model.Base.BaseResponse.Success*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.Success*
        name: Success
        nameWithType: BaseResponse.Success
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.Success
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.Success*
        name: Success
        nameWithType: BaseResponse.Success
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.Success
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Base.BaseResponse.Success
  SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription*
        name: StatusDescription
        nameWithType: BaseResponse.StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription*
        name: StatusDescription
        nameWithType: BaseResponse.StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
  Newtonsoft.Json.JsonConverterAttribute:
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonConverterAttribute
        name: JsonConverterAttribute
        nameWithType: JsonConverterAttribute
        qualifiedName: Newtonsoft.Json.JsonConverterAttribute
        isExternal: true
      VB:
      - id: Newtonsoft.Json.JsonConverterAttribute
        name: JsonConverterAttribute
        nameWithType: JsonConverterAttribute
        qualifiedName: Newtonsoft.Json.JsonConverterAttribute
        isExternal: true
    isDefinition: true
    parent: Newtonsoft.Json
    commentId: T:Newtonsoft.Json.JsonConverterAttribute
  Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type):
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
        name: JsonConverterAttribute
        nameWithType: JsonConverterAttribute.JsonConverterAttribute
        qualifiedName: Newtonsoft.Json.JsonConverterAttribute.JsonConverterAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
        name: JsonConverterAttribute
        nameWithType: JsonConverterAttribute.JsonConverterAttribute
        qualifiedName: Newtonsoft.Json.JsonConverterAttribute.JsonConverterAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Newtonsoft.Json.JsonConverterAttribute
    commentId: M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
  SaAddressApi.Net.Model.Base.BaseResponse.FullException*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.FullException*
        name: FullException
        nameWithType: BaseResponse.FullException
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.FullException
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.FullException*
        name: FullException
        nameWithType: BaseResponse.FullException
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.FullException
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Base.BaseResponse.FullException
  SaAddressApi.Net.Model.Base.BaseResponse:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse
        name: BaseResponse
        nameWithType: BaseResponse
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse
        name: BaseResponse
        nameWithType: BaseResponse
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse
    isDefinition: true
    parent: SaAddressApi.Net.Model.Base
    commentId: T:SaAddressApi.Net.Model.Base.BaseResponse
  Newtonsoft.Json.JsonObjectAttribute:
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonObjectAttribute
        name: JsonObjectAttribute
        nameWithType: JsonObjectAttribute
        qualifiedName: Newtonsoft.Json.JsonObjectAttribute
        isExternal: true
      VB:
      - id: Newtonsoft.Json.JsonObjectAttribute
        name: JsonObjectAttribute
        nameWithType: JsonObjectAttribute
        qualifiedName: Newtonsoft.Json.JsonObjectAttribute
        isExternal: true
    isDefinition: true
    parent: Newtonsoft.Json
    commentId: T:Newtonsoft.Json.JsonObjectAttribute
  Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization):
    name:
      CSharp:
      - id: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
        name: JsonObjectAttribute
        nameWithType: JsonObjectAttribute.JsonObjectAttribute
        qualifiedName: Newtonsoft.Json.JsonObjectAttribute.JsonObjectAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.MemberSerialization
        name: MemberSerialization
        nameWithType: MemberSerialization
        qualifiedName: Newtonsoft.Json.MemberSerialization
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
        name: JsonObjectAttribute
        nameWithType: JsonObjectAttribute.JsonObjectAttribute
        qualifiedName: Newtonsoft.Json.JsonObjectAttribute.JsonObjectAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.MemberSerialization
        name: MemberSerialization
        nameWithType: MemberSerialization
        qualifiedName: Newtonsoft.Json.MemberSerialization
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Newtonsoft.Json.JsonObjectAttribute
    commentId: M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)
  Newtonsoft.Json.MemberSerialization:
    name:
      CSharp:
      - id: Newtonsoft.Json.MemberSerialization
        name: MemberSerialization
        nameWithType: MemberSerialization
        qualifiedName: Newtonsoft.Json.MemberSerialization
        isExternal: true
      VB:
      - id: Newtonsoft.Json.MemberSerialization
        name: MemberSerialization
        nameWithType: MemberSerialization
        qualifiedName: Newtonsoft.Json.MemberSerialization
        isExternal: true
    isDefinition: true
    parent: Newtonsoft.Json
    commentId: T:Newtonsoft.Json.MemberSerialization
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Title*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title*
        name: Title
        nameWithType: ISaAddress.Title
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title*
        name: Title
        nameWithType: ISaAddress.Title
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.Title
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1*
        name: Address1
        nameWithType: ISaAddress.Address1
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1*
        name: Address1
        nameWithType: ISaAddress.Address1
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address1
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2*
        name: Address2
        nameWithType: ISaAddress.Address2
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2*
        name: Address2
        nameWithType: ISaAddress.Address2
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.Address2
  SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng*
        name: ObjLatLng
        nameWithType: ISaAddress.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng*
        name: ObjLatLng
        nameWithType: ISaAddress.ObjLatLng
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.ObjLatLng
  SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber*
        name: BuildingNumber
        nameWithType: ISaAddress.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber*
        name: BuildingNumber
        nameWithType: ISaAddress.BuildingNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.BuildingNumber
  SaAddressApi.Net.Model.Interfaces.ISaAddress.Street*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street*
        name: Street
        nameWithType: ISaAddress.Street
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street*
        name: Street
        nameWithType: ISaAddress.Street
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.Street
  SaAddressApi.Net.Model.Interfaces.ISaAddress.District*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.District*
        name: District
        nameWithType: ISaAddress.District
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.District*
        name: District
        nameWithType: ISaAddress.District
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.District
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.District
  SaAddressApi.Net.Model.Interfaces.ISaAddress.City*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.City*
        name: City
        nameWithType: ISaAddress.City
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.City*
        name: City
        nameWithType: ISaAddress.City
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.City
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.City
  SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode*
        name: PostCode
        nameWithType: ISaAddress.PostCode
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode*
        name: PostCode
        nameWithType: ISaAddress.PostCode
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.PostCode
  SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber*
        name: AdditionalNumber
        nameWithType: ISaAddress.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber*
        name: AdditionalNumber
        nameWithType: ISaAddress.AdditionalNumber
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.AdditionalNumber
  SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName*
        name: RegionName
        nameWithType: ISaAddress.RegionName
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
      VB:
      - id: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName*
        name: RegionName
        nameWithType: ISaAddress.RegionName
        qualifiedName: SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Interfaces.ISaAddress.RegionName
  SaAddressApi.Net.Model.Base.BaseResponse.Success:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.Success
        name: Success
        nameWithType: BaseResponse.Success
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.Success
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.Success
        name: Success
        nameWithType: BaseResponse.Success
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.Success
    isDefinition: true
    parent: SaAddressApi.Net.Model.Base.BaseResponse
    commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.Success
  SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
        name: StatusDescription
        nameWithType: BaseResponse.StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
        name: StatusDescription
        nameWithType: BaseResponse.StatusDescription
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
    isDefinition: true
    parent: SaAddressApi.Net.Model.Base.BaseResponse
    commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.StatusDescription
  SaAddressApi.Net.Model.Base.BaseResponse.FullException:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.FullException
        name: FullException
        nameWithType: BaseResponse.FullException
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.FullException
      VB:
      - id: SaAddressApi.Net.Model.Base.BaseResponse.FullException
        name: FullException
        nameWithType: BaseResponse.FullException
        qualifiedName: SaAddressApi.Net.Model.Base.BaseResponse.FullException
    isDefinition: true
    parent: SaAddressApi.Net.Model.Base.BaseResponse
    commentId: P:SaAddressApi.Net.Model.Base.BaseResponse.FullException
  System.Nullable{System.Int32}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Int32}
  SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults*
        name: TotalSearchedResults
        nameWithType: AddressResponse<T>.TotalSearchedResults
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse<T>.TotalSearchedResults
      VB:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults*
        name: TotalSearchedResults
        nameWithType: AddressResponse(Of T).TotalSearchedResults
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse(Of T).TotalSearchedResults
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.AddressResponse`1.TotalSearchedResults
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses*
        name: Addresses
        nameWithType: AddressResponse<T>.Addresses
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse<T>.Addresses
      VB:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses*
        name: Addresses
        nameWithType: AddressResponse(Of T).Addresses
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse(Of T).Addresses
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.AddressResponse`1.Addresses
  SaAddressApi.Net.Model.SaPostCodeObj[]:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaPostCodeObj
        name: SaPostCodeObj
        nameWithType: SaPostCodeObj
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: SaAddressApi.Net.Model.SaPostCodeObj
        name: SaPostCodeObj
        nameWithType: SaPostCodeObj
        qualifiedName: SaAddressApi.Net.Model.SaPostCodeObj
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode*
        name: PostCode
        nameWithType: AddressResponse<T>.PostCode
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse<T>.PostCode
      VB:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode*
        name: PostCode
        nameWithType: AddressResponse(Of T).PostCode
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse(Of T).PostCode
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.AddressResponse`1.PostCode
  SaAddressApi.Net.Model.Response.AddressResponse`1:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: SaAddressApi.Net.Model.Response.AddressResponse`1
        name: AddressResponse
        nameWithType: AddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.AddressResponse
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.Response.AddressResponse`1
  SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound*
        name: NorthBound
        nameWithType: ExtentsFeaturesResponse.NorthBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
      VB:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound*
        name: NorthBound
        nameWithType: ExtentsFeaturesResponse.NorthBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.NorthBound
  SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound*
        name: SouthBound
        nameWithType: ExtentsFeaturesResponse.SouthBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
      VB:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound*
        name: SouthBound
        nameWithType: ExtentsFeaturesResponse.SouthBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.SouthBound
  SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound*
        name: EastBound
        nameWithType: ExtentsFeaturesResponse.EastBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
      VB:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound*
        name: EastBound
        nameWithType: ExtentsFeaturesResponse.EastBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.EastBound
  SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound*
        name: WestBound
        nameWithType: ExtentsFeaturesResponse.WestBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
      VB:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound*
        name: WestBound
        nameWithType: ExtentsFeaturesResponse.WestBound
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse.WestBound
  SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
        name: ExtentsFeaturesResponse
        nameWithType: ExtentsFeaturesResponse
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
      VB:
      - id: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
        name: ExtentsFeaturesResponse
        nameWithType: ExtentsFeaturesResponse
        qualifiedName: SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.Response.ExtentsFeaturesResponse
  SaAddressApi.Net.Model.SaLookup[]:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.SaLookup
        name: SaLookup
        nameWithType: SaLookup
        qualifiedName: SaAddressApi.Net.Model.SaLookup
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: SaAddressApi.Net.Model.SaLookup
        name: SaLookup
        nameWithType: SaLookup
        qualifiedName: SaAddressApi.Net.Model.SaLookup
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  SaAddressApi.Net.Model.Response.LookupResponse.Regions*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Regions*
        name: Regions
        nameWithType: LookupResponse.Regions
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Regions
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Regions*
        name: Regions
        nameWithType: LookupResponse.Regions
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Regions
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.LookupResponse.Regions
  SaAddressApi.Net.Model.Response.LookupResponse.Cities*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Cities*
        name: Cities
        nameWithType: LookupResponse.Cities
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Cities
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Cities*
        name: Cities
        nameWithType: LookupResponse.Cities
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Cities
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.LookupResponse.Cities
  SaAddressApi.Net.Model.Response.LookupResponse.Districts*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Districts*
        name: Districts
        nameWithType: LookupResponse.Districts
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Districts
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.Districts*
        name: Districts
        nameWithType: LookupResponse.Districts
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.Districts
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.LookupResponse.Districts
  SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories*
        name: ServiceCategories
        nameWithType: LookupResponse.ServiceCategories
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories*
        name: ServiceCategories
        nameWithType: LookupResponse.ServiceCategories
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.LookupResponse.ServiceCategories
  SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories*
        name: ServiceSubCategories
        nameWithType: LookupResponse.ServiceSubCategories
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories*
        name: ServiceSubCategories
        nameWithType: LookupResponse.ServiceSubCategories
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.LookupResponse.ServiceSubCategories
  SaAddressApi.Net.Model.Response.LookupResponse:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.LookupResponse
        name: LookupResponse
        nameWithType: LookupResponse
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse
      VB:
      - id: SaAddressApi.Net.Model.Response.LookupResponse
        name: LookupResponse
        nameWithType: LookupResponse
        qualifiedName: SaAddressApi.Net.Model.Response.LookupResponse
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.Response.LookupResponse
  SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound*:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound*
        name: AddressFound
        nameWithType: VerifyAddressResponse.AddressFound
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
      VB:
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound*
        name: AddressFound
        nameWithType: VerifyAddressResponse.AddressFound
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
    isDefinition: true
    commentId: Overload:SaAddressApi.Net.Model.Response.VerifyAddressResponse.AddressFound
  SaAddressApi.Net.Model.Response.VerifyAddressResponse:
    name:
      CSharp:
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse
        name: VerifyAddressResponse
        nameWithType: VerifyAddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse
      VB:
      - id: SaAddressApi.Net.Model.Response.VerifyAddressResponse
        name: VerifyAddressResponse
        nameWithType: VerifyAddressResponse
        qualifiedName: SaAddressApi.Net.Model.Response.VerifyAddressResponse
    isDefinition: true
    commentId: T:SaAddressApi.Net.Model.Response.VerifyAddressResponse
  SaAddressApi.Net.Model.Response:
    name:
      CSharp:
      - name: SaAddressApi.Net.Model.Response
        nameWithType: SaAddressApi.Net.Model.Response
        qualifiedName: SaAddressApi.Net.Model.Response
      VB:
      - name: SaAddressApi.Net.Model.Response
        nameWithType: SaAddressApi.Net.Model.Response
        qualifiedName: SaAddressApi.Net.Model.Response
    isDefinition: true
    commentId: N:SaAddressApi.Net.Model.Response
